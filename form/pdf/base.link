
field pdf
  state catalog, field reference
  state page, chain page

field page
  field dictionary
  field content
  field resource

field reference
  state id
  state properties
  state stream
  state generation

block stream-dictionary-entry
  state <Length>
    field integer
    force true
    brief <The number of bytes from the beginning of the line following the keyword stream to the last byte just before the keyword endstream. (There may be an additional EOL marker, preceding endstream, that is not included in the count and is not logically part of the stream data.) See 7.3.8.2, "Stream Extent", for further discussion.>
  state <Filter>
    field name
    field array
    force false
    brief <The name of a filter that shall be applied in processing the stream data found between the keywords stream and endstream, or an array of zero, one or several names. Multiple filters shall be specified in the order in which they are to be applied.>
  state <DecodeParms>
    field dictionary
    field array
    force false
    brief <A parameter dictionary or an array of such dictionaries, used by the filters specified by Filter. If there is only one filter and that filter has parameters, DecodeParmsshall be set to the filter’s parameter dictionary unless all the filter’s parameters have their default values, in which case the DecodeParms entry may be omitted. If there are multiple filters and any of the filters has parameters set to nondefault values, DecodeParms shall be an array with one entry for each filter: either the parameter dictionary for that filter, or the null object if that filter has no parameters (or if all of its parameters have their default values). If none of the filters have parameters, or if all their parameters have default values, the DecodeParms entry may be omitted.>
  state <F>
    field file-specification
    force false
    brief <The file containing the stream data. If this entry is present, the bytes between stream and endstreamshall be ignored. However, the Length entry should still specify the number of those bytes (usually, there are no bytes and Length is 0). The filters that are applied to the file data shall be specified by FFilter and the filter parameters shall be specified by FDecodeParms.>
  state <Ffilter>
    field name
    field array
    force false
    brief <The name of a filter to be applied in processing the data found in the stream’s external file, or an array of zero, one or several such names. The same rules apply as for Filter.>
  state <FDecodeParms>
    field dictionary
    field array
    force false
    brief <A parameter dictionary, or an array of such dictionaries, used by the filters specified by FFilter. The same rules apply as for DecodeParms.>
  state <DL>
    field integer
    force false
    brief <A non-negative integer representing the number of bytes in the decoded (defiltered) stream. It can be used to determine, for example, whether enough disk space is available to write a stream to a file. This value shall be considered a hint only; for some stream filters, it may not be possible to determine this value precisely.>

block standard-filter
  state <ASCIIHexDecode>
    state no
    brief <Decodes data encoded in an ASCII hexadecimal representation, reproducing the original binary data.>
  state <ASCII85Decode>
    state no
    brief <Decodes data encoded in an ASCII base-85 representation, reproducing the original binary data.>
  state <LZWDecode>
    state yes
    brief <Decompresses data encoded using the LZW (Lempel-Ziv-Welch) adaptive compression method, reproducing the original text or binary data.>
  state <FlateDecode>
    state yes
    brief <Decompresses data encoded using the zlib/deflate compression method, reproducing the original text or binary data.>
  state <RunLengthDecode>
    state no
    brief <Decompresses data encoded using a byte-oriented run-length encoding algorithm, reproducing the original text or binary data (typically monochrome image data, or any data that contains frequent long runs of a single byte value).>
  state <CCITTFaxDecode>
    state yes
    brief <Decompresses data encoded using the CCITT facsimile standard, reproducing the original data (typically monochrome image data at 1 bit per pixel).>
  state <JBIG2Decode>
    state yes
    brief <Decompresses data encoded using the JBIG2 standard, reproducing the original monochrome (1 bit per pixel) image data (or an approximation of that data).>
  state <DCTDecode>
    state yes
    brief <Decompresses data encoded using a DCT (discrete cosine transform) technique based on the JPEG standard, reproducing image sample data that approximates the original data.>
  state <JPXDecode>
    state no
    brief <Decompresses data encoded using the wavelet-based JPEG2000 standard, reproducing the original image data.>
  state <Crypt>
    state yes
    brief <Decrypts data encrypted by a security handler, reproducing the data as it was before encryption.>

block optional-lzwdecode-and-flatedecode-filter-parameter
   state <Predictor>
    field integer
    value <A code that selects the predictor algorithm, if any. If the value of this entry is 1, the filter shall assume that the normal algorithm was used to encode the data, without prediction. If the value is greater than 1, the filter shall assume that the data was differenced before being encoded, and Predictor selects the predictor algorithm. For more information regarding Predictor values greater than 1, see 7.4.4.4, "LZW and Flate Predictor Functions." Default value: 1.>
   state <Colors>
    field integer
    value <(May be used only if Predictor is greater than 1) The number of interleaved colour components per sample. Valid values are 1 to 4 (PDF 1.0) and 1 or greater (PDF 1.3). Default value: 1.>
   state <BitsPerComponent>
    field integer
    value <(May be used only if Predictor is greater than 1) The number of bits used to represent each colour component in a sample. Valid values are 1, 2, 4, 8, and (PDF 1.5) 16. Default value: 8.>
   state <Columns>
    field integer
    value <(May be used only if Predictor is greater than 1) The number of samples in each row. Default value: 1.>
   state <EarlyChange>
    field integer
    value <(LZWDecode only) An indication of when to increase the code length. If the value of this entry is 0, code length increases shall be postponed as long as possible. If the value is 1, code length increases shall occur one code early. This parameter is included because LZW sample code distributed by some vendors increases the code length one code earlier than necessary. Default value: 1.>

block optional-ccittfaxdecode-filter-parameter
  state <K>
    field integer
    value <A code identifying the encoding scheme used: < 0Pure two-dimensional encoding (Group 4) =0Pure one-dimensional encoding (Group 3, 1-D) > 0Mixed one- and two-dimensional encoding (Group 3, 2-D), in which a line encoded one-dimensionally may be followed by at most K − 1 lines encoded two-dimensionally The filter shall distinguish among negative, zero, and positive values of K to determine how to interpret the encoded data; however, it shall not distinguish between different positive Kvalues. Default value: 0.>
  state <EndOfLine>
    field boolean
    value <A flag indicating whether end-of-line bit patterns shall be present in the encoding. The CCITTFaxDecode filter shall always accept end-of-line bit patterns. If EndOfLine is trueend-of-line bit patterns shall be present.Default value: false.>
  state <EncodedByteAlign>
    field boolean
    value <A flag indicating whether the filter shall expect extra 0 bits before each encoded line so that the line begins on a byte boundary. If true, the filter shall skip over encoded bits to begin decoding each line at a byte boundary. If false, the filter shall not expect extra bits in the encoded representation. Default value: false.>
  state <Columns>
    field integer
    value <The width of the image in pixels. If the value is not a multiple of 8, the filter shall adjust the width of the unencoded image to the next multiple of 8 so that each line starts on a byte boundary. Default value: 1728.>
  state <Rows>
    field integer
    value <The height of the image in scan lines. If the value is 0 or absent, the image’s height is not predetermined, and the encoded data shall be terminated by an end-of-block bit pattern or by the end of the filter’s data. Default value: 0.>
  state <EndOfBlock>
    field boolean
    value <A flag indicating whether the filter shall expect the encoded data to be terminated by an end-of-block pattern, overriding the Rows parameter. If false, the filter shall stop when it has decoded the number of lines indicated by Rows or when its data has been exhausted, whichever occurs first. The end-of-block pattern shall be the CCITT end-of-facsimile-block (EOFB) or return-to-control (RTC) appropriate for the Kparameter. Default value: true.>
  state <BlackIs1>
    field boolean
    value <A flag indicating whether 1 bits shall be interpreted as black pixels and 0 bits as white pixels, the reverse of the normal PDF convention for image data. Default value: false.>
  state <DamagedRowsBeforeError>
    field integer
    value <The number of damaged rows of data that shall be tolerated before an error occurs. This entry shall apply only if EndOfLine is true and K is non-negative. Tolerating a damaged row shall mean locating its end in the encoded data by searching for an EndOfLine pattern and then substituting decoded data from the previous row if the previous row was not damaged, or a white scan line if the previous row was also damaged. Default value: 0.>

block optional-jbig2decode-filter-parameter
  state <JBIG2Globals>
    field stream
    value <A stream containing the JBIG2 global (page 0) segments. Global segments shall be placed in this stream even if only a single JBIG2 image XObject refers to it.>

block optional-dctdecode-filter-parameter
  state <ColorTransform>
    field integer
    force false
    value <A code specifying the transformation that shall be performed on the sample values: 0 No transformation. 1 If the image has three colour components, RGB values shall be transformed to YUV before encoding and from YUV to RGB after decoding. If the image has four components, CMYK values shall be transformed to YUVK before encoding and from YUVK to CMYK after decoding. This option shall be ignored if the image has one or two colour components. If the encoding algorithm has inserted the Adobe-defined markera code in the encoded data indicating the ColorTransform value, then the colours shall be transformed, or not, after the DCT decoding has been performed according to the value provided in the encoded data and the value of this dictionary entry shall be ignored. If the Adobe- defined marker code in the encoded data indicating the ColorTransform value is not present then the value specified in this dictionary entry will be used. If the Adobe-defined marker code in the encoded data indicating the ColorTransform value is not present and this dictionary entry is not present in the filter dictionary then the default value of ColorTransform shall be 1 if the image has three components and 0 otherwise.>

block optional-crypt-filters-parameter
  state <Type>
    field name
    force false
    value <If present, shall be CryptFilterDecodeParms for a Crypt filter decode parameter dictionary.>
  state <Name>
    field name
    force false
    value <The name of the crypt filter that shall be used to decrypt this stream. The name shall correspond to an entry in the CF entry of the encryption dictionary (see Table 20) or one of the standard crypt filters (see Table 26). Default value: Identity.>

block file-trailer-dictionary
  state <Size>
    field integer
    force true
    value <The total number of entries in the file’s cross-reference table, as defined by the combination of the original section and all update sections. Equivalently, this value shall be 1 greater than the highest object number defined in the file. Any object in a cross-reference section whose number is greater than this value shall be ignored and defined to be missing by a conforming reader.>
  state <Prev>
    field integer
    force false
    value <The byte offset in the decoded stream from the beginning of the file to the beginning of the previous cross-reference section.>
  state <Root>
    field dictionary
    force true
    value <The catalog dictionary for the PDF document contained in the file (see 7.7.2, "Document Catalog").>
  state <Encrypt>
    field dictionary
    force true
    value <The document’s encryption dictionary (see 7.6, "Encryption").>
  state <Info>
    field dictionary
    force false
    value <The document’s information dictionary (see 14.3.3, "Document Information Dictionary").>
  state <ID>
    field array
    force true
    value <An array of two byte-strings constituting a file identifier (see 14.4, "File Identifiers") for the file. If there is an Encrypt entry this array and the two byte-strings shall be direct objects and shall be unencrypted. NOTE 1 Because the ID entries are not encrypted it is possible to check the ID key to assure that the correct file is being accessed without decrypting the file. The restrictions that the string be a direct object and not be encrypted assure that this is possible. NOTE 2 Although this entry is optional, its absence might prevent the file from functioning in some workflows that depend on files being uniquely identified. NOTE 3 The values of the ID strings are used as input to the encryption algorithm. If these strings were indirect, or if the ID array were indirect, these strings would be encrypted when written. This would result in a circular condition for a reader: the ID strings must be decrypted in order to use them to decrypt strings, including the ID strings themselves. The preceding restriction prevents this circular condition.>

block table-16-additional-entries-specific-to-an-object-stream-dictionary
  state Type
    field name
    force true
    brief <The type of PDF object that this dictionary describes; shall be ObjStm for an object stream.>
  state N
    field integer
    force true
    brief <The number of indirect objects stored in the stream.>
  state First
    field integer
    force true
    brief <The byte offset in the decoded stream of the first compressed object.>
  state Extends
    field stream
    force false
    brief <A reference to another object stream, of which the current object stream shall be considered an extension. Both streams are considered part of a collection of object streams (see below). A given collection consists of a set of streams whose Extends links form a directed acyclic graph.>

block table-17-additional-entries-specific-to-a-cross-reference-stream-dictionary
  state Type
    field name
    force true
    brief <The type of PDF object that this dictionary describes; shall be XRef for a cross-reference stream.>
  state Size
    field integer
    force true
    brief <The number one greater than the highest object number used in this section or in any section for which this shall be an update. It shall be equivalent to the Size entry in a trailer dictionary.>
  state Index
    field array
    force false
    brief <An array containing a pair of integers for each subsection in this section. The first integer shall be the first object number in the subsection; the second integer shall be the number of entries in the subsection The array shall be sorted in ascending order by object number. Subsections cannot overlap; an object number may have at most one entry in a section. Default value: [0 Size].>
  state Prev
    field integer
    force false
    brief <(Present only if the file has more than one cross-reference stream; not meaningful in hybrid-reference files; see 7.5.8.4, "Compatibility with Applications That Do Not Support Compressed Reference Streams") The byte offset in the decoded stream from the beginning of the file to the beginning of the previous cross-reference stream. This entry has the same function as the Prev entry in the trailer dictionary (Table 15).>
  state W
    field array
    force true
    brief <An array of integers representing the size of the fields in a single cross-reference entry. Table 18 describes the types of entries and their fields. For PDF 1.5, W always contains three integers; the value of each integer shall be the number of bytes (in the decoded stream) of the corresponding field. EXAMPLE [1 2 1] means that the fields are one byte, two bytes, and one byte, respectively. A value of zero for an element in the W array indicates that the corresponding field shall not be present in the stream, and the default value shall be used, if there is one. If the first element is zero, the type field shall not be present, and shall default to type 1. The sum of the items shall be the total length of each entry; it can be used with the Index array to determine the starting position of each subsection. Different cross-reference streams in a PDF file may use different values for W.>

block table-19-additional-entries-in-a-hybrid-reference-file’s trailer dictionary
  state <XRefStm>
    field integer
    force false
    value <The byte offset in the decoded stream from the beginning of the file of a cross-reference stream.>

block table-20-entries-common-to-all-encryption-dictionaries
  state <Filter>
    field name
    force true
    value <The name of the preferred security handler for this document. It shall be the name of the security handler that was used to encrypt the document. If SubFilter is not present, only this security handler shall be used when opening the document. If it is present, a conforming reader can use any security handler that implements the format specified by SubFilter. Standard shall be the name of the built-in password-based security handler. Names for other security handlers may be registered by using the procedure described in Annex E.>
  state <SubFilter>
    field name
    force false
    value <A name that completely specifies the format and interpretation of the contents of the encryption dictionary. It allows security handlers other than the one specified by Filter to decrypt the document. If this entry is absent, other security handlers shall not decrypt the document. NOTE This entry was introduced in PDF 1.3 to support the use of public- key cryptography in PDF files (see 7.6.4, "Public-Key Security Handlers"); however, it was not incorporated into the PDF Reference until the fourth edition (PDF 1.5).>
  state <V>
    field number
    force false
    value <A code specifying the algorithm to be used in encrypting and decrypting the document: 0 An algorithm that is undocumented. This value shall not be used. 1 "Algorithm 1: Encryption of data using the RC4 or AES algorithms" in 7.6.2, "General Encryption Algorithm," with an encryption key length of 40 bits; see below. 2 (PDF 1.4) "Algorithm 1: Encryption of data using the RC4 or AES algorithms" in 7.6.2, "General Encryption Algorithm," but permitting encryption key lengths greater than 40 bits. 3 (PDF 1.4) An unpublished algorithm that permits encryption key lengths ranging from 40 to 128 bits. This value shall not appear in a conforming PDF file. 4 (PDF 1.5) The security handler defines the use of encryption and decryption in the document, using the rules specified by the CF, StmF, and StrF entries. The default value if this entry is omitted shall be 0, but when present should be a value of 1 or greater.>
  state <Length>
    field integer
    force false
    value <The length of the encryption key, in bits. The value shall be a multiple of 8, in the range 40 to 128. Default value: 40.>
  state <CF>
    field dictionary
    force false
    value <A dictionary whose keys shall be crypt filter names and whose values shall be the corresponding crypt filter dictionaries (see Table 25). Every crypt filter used in the document shall have an entry in this dictionary, except for the standard crypt filter names (see Table 26). The conforming reader shall ignore entries in CF dictionary with the keys equal to those listed in Table 26 and use properties of the respective standard crypt filters.>
  state <StmF>
    field name
    force false
    value <The name of the crypt filter that shall be used by default when decrypting streams. The name shall be a key in the CF dictionary or a standard crypt filter name specified in Table 26. All streams in the document, except for cross-reference streams (see 7.5.8, "Cross-Reference Streams") or streams that have a Crypt entry in their Filter array (see Table 6), shall be decrypted by the security handler, using this crypt filter. Default value: Identity.>
  state <StrF>
    field name
    force false
    value <The name of the crypt filter that shall be used when decrypting all strings in the document. The name shall be a key in the CF dictionary or a standard crypt filter name specified in Table 26. Default value: Identity.>
  state <EFF>
    field name
    force false
    value <The name of the crypt filter that shall be used when encrypting embedded file streams that do not have their own crypt filter specifier; it shall correspond to a key in the CF dictionary or a standard crypt filter name specified in Table 26. This entry shall be provided by the security handler. Conforming writers shall respect this value when encrypting embedded files, except for embedded file streams that have their own crypt filter specifier. If this entry is not present, and the embedded file stream does not contain a crypt filter specifier, the stream shall be encrypted using the default stream crypt filter specified by StmF.>

block table-21-additional-encryption-dictionary-entries-for-the-standard-security-handler
  state <R>
    field number
    force true
    value <A number specifying which revision of the standard security handler shall be used to interpret this dictionary: 2 if the document is encrypted with a V value less than 2 (see Table 20) and does not have any of the access permissions set to 0 (by means of the P entry, below) that are designated “Security handlers of revision 3 or greater” in Table 22 3 if the document is encrypted with a V value of 2 or 3, or has any “Security handlers of revision 3 or greater” access permissions set to 0 4 if the document is encrypted with a V value of 4>
  state <O>
    field string
    force true
    value <A 32-byte string, based on both the owner and user passwords, that shall be used in computing the encryption key and in determining whether a valid owner password was entered. For more information, see 7.6.3.3, "Encryption Key Algorithm," and 7.6.3.4, "Password Algorithms.">
  state <U>
    field string
    force true
    value <A 32-byte string, based on the user password, that shall be used in determining whether to prompt the user for a password and, if so, whether a valid user or owner password was entered. For more information, see 7.6.3.4, "Password Algorithms.">
  state <P>
    field integer
    force true
    value <A set of flags specifying which operations shall be permitted when the document is opened with user access (see Table 22).>
  state <EncryptMetadata>
    field boolean
    force false
    value <Indicates whether the document-level metadata stream (see 14.3.2, "Metadata Streams") shall be encrypted. Conforming products should respect this value. Default value: true.>

block table-22-user-access-permissions
  block 3
    brief <(Security handlers of revision 2) Print the document. (Security handlers of revision 3 or greater) Print the document (possibly not at the highest quality level, depending on whether bit 12 is also set).>
  block 4
    brief <Modify the contents of the document by operations other than those controlled by bits 6, 9, and 11.>
  block 5
    brief <(Security handlers of revision 2) Copy or otherwise extract text and graphics from the document, including extracting text and graphics (in support of accessibility to users with disabilities or for other purposes). (Security handlers of revision 3 or greater) Copy or otherwise extract text and graphics from the document by operations other than that controlled by bit 10.>
  block 6
    brief <Add or modify text annotations, fill in interactive form fields, and, if bit 4 is also set, create or modify interactive form fields (including signature fields).>
  block 9
    brief <(Security handlers of revision 3 or greater) Fill in existing interactive form fields (including signature fields), even if bit 6 is clear.>
  block 10
    brief <(Security handlers of revision 3 or greater) Extract text and graphics (in support of accessibility to users with disabilities or for other purposes).>
  block 11
    brief <(Security handlers of revision 3 or greater) Assemble the document (insert, rotate, or delete pages and create bookmarks or thumbnail images), even if bit 4 is clear.>
  block 12
    brief <(Security handlers of revision 3 or greater) Print the document to a representation from which a faithful digital copy of the PDF content could be generated. When this bit is clear (and bit 3 is set), printing is limited to a low-level representation of the appearance, possibly of degraded quality.>

block table-23-additional-encryption-dictionary-entries-for-public-key-security-handlers
  state <Recipients>
    field array
    force true
    value <An array of byte-strings, where each string is a PKCS#7 object listing recipients who have been granted equal access rights to the document. The data contained in the PKCS#7 object shall include both a cryptographic key that shall be used to decrypt the encrypted data and the access permissions (see Table 24) that apply to the recipient list. There shall be only one PKCS#7 object per unique set of access permissions; if a recipient appears in more than one list, the permissions used shall be those in the first matching list. When SubFilter is adbe.pkcs7.s5, recipient lists shall be specified in the crypt filter dictionary; see Table 27.>
  state <P>
    field integer
    force true
    value <A set of flags specifying which operations shall be permitted when the document is opened with user access. If bit 2 is set to 1, all other bits are ignored and all operations are permitted. If bit 2 is set to 0, permission for operations are based on the values of the remaining flags defined in Table 24.>

block table-24-public-key-security-handler-user-access-permissions
  block 2
    brief <When set permits change of encryption and enables all other permissions.>
  block 3
    brief <Print the document (possibly not at the highest quality level, depending on whether bit 12 is also set).>
  block 4
    brief <Modify the contents of the document by operations other than those controlled by bits 6, 9, and 11.>
  block 5
    brief <Copy or otherwise extract text and graphics from the document by operations other than that controlled by bit 10.>
  block 6
    brief <Add or modify text annotations, fill in interactive form fields, and, if bit 4 is also set, create or modify interactive form fields (including signature fields).>
  block 9
    brief <Fill in existing interactive form fields (including signature fields), even if bit 6 is clear.>
  block 10
    brief <Extract text and graphics (in support of accessibility to users with disabilities or for other purposes).>
  block 11
    brief <Assemble the document (insert, rotate, or delete pages and create bookmarks or thumbnail images), even if bit 4 is clear.>
  block 12
    brief <Print the document to a representation from which a faithful digital copy of the PDF content could be generated. When this bit is clear (and bit 3 is set), printing is limited to a low- level representation of the appearance, possibly of degraded quality.>

block table-25-entries-common-to-all-crypt-filter-dictionaries
  state <Type>
    field name
    force false
    value <If present, shall be CryptFilter for a crypt filter dictionary.>
  state <CFM>
    field name
    force false
    value <The method used, if any, by the conforming reader to decrypt data. The following values shall be supported: None The application shall not decrypt data but shall direct the input stream to the security handler for decryption. V2 The application shall ask the security handler for the encryption key and shall implicitly decrypt data with "Algorithm 1: Encryption of data using the RC4 or AES algorithms", using the RC4 algorithm. AESV2 (PDF 1.6) The application shall ask the security handler for the encryption key and shall implicitly decrypt data with "Algorithm 1: Encryption of data using the RC4 or AES algorithms", using the AES algorithm in Cipher Block Chaining (CBC) mode with a 16-byte block size and an initialization vector that shall be randomly generated and placed as the first 16 bytes in the stream or string. When the value is V2 or AESV2, the application may ask once for this encryption key and cache the key for subsequent use for streams that use the same crypt filter. Therefore, there shall be a one-to-one relationship between a crypt filter name and the corresponding encryption key. Only the values listed here shall be supported. Applications that encounter other values shall report that the file is encrypted with an unsupported algorithm. Default value: None.>
  state <AuthEvent>
    field name
    force false
    value <The event to be used to trigger the authorization that is required to access encryption keys used by this filter. If authorization fails, the event shall fail. Valid values shall be: DocOpen: Authorization shall be required when a document is opened. EFOpen: Authorization shall be required when accessing embedded files. Default value: DocOpen. If this filter is used as the value of StrF or StmF in the encryption dictionary (see Table 20), the conforming reader shall ignore this key and behave as if the value is DocOpen.>
  state <Length>
    field integer
    force false
    value <The bit length of the encryption key. It shall be a multiple of 8 in the range of 40 to 128. Security handlers may define their own use of the Length entry and should use it to define the bit length of the encryption key. Standard security handler expresses the length in multiples of 8 (16 means 128) and public-key security handler expresses it as is (128 means 128).>

block table-26-standard-crypt-filter-names
  state <Identity>
    brief <Input data shall be passed through without any processing.>

block table-27-additional-crypt-filter-dictionary-entries-for-public-key-security-handlers
  state <Recipients>
    field array or string
    force true
    value <If the crypt filter is referenced from StmF or StrF in the encryption dictionary, this entry shall be an array of byte strings, where each string shall be a binary-encoded PKCS#7 object that shall list recipients that have been granted equal access rights to the document. The enveloped data contained in the PKCS#7 object shall include both a 20-byte seed value that shall be used to compute the encryption key (see 7.6.4.3, "Public-Key Encryption Algorithms") followed by 4 bytes of permissions settings (see Table 22) that shall apply to the recipient list. There shall be only one object per unique set of access permissions. If a recipient appears in more than one list, the permissions used shall be those in the first matching list. If the crypt filter is referenced from a Crypt filter decode parameter dictionary (see Table 14), this entry shall be a string that shall be a binary-encoded PKCS#7 object shall contain a list of all recipients who are permitted to access the corresponding encrypted stream. The enveloped data contained in the PKCS#7 object shall be a 20-byte seed value that shall be used to create the encryption key that shall be used by the algorithm in "Algorithm 1: Encryption of data using the RC4 or AES algorithms".>
  state <EncryptMetadata>
    field boolean
    force false
    value <Indicates whether the document-level metadata stream (see 14.3.2, "Metadata Streams") shall be encrypted. Conforming readers shall respect this value when determining whether metadata shall be encrypted. The value of the EncryptMetadata entry is set by the security handler rather than the conforming reader. Default value: true.>

block catalog-dictionary
  state <Type>
    field name
    force true
    value <The type of PDF object that this dictionary describes; shall be Catalog for the catalog dictionary.>
  state <Version>
    field name
    force false
    value <The version of the PDF specification to which the document conforms (for example, 1.4) if later than the version specified in the file’s header (see 7.5.2, "File Header"). If the header specifies a later version, or if this entry is absent, the document shall conform to the version specified in the header. This entry enables a conforming writer to update the version using an incremental update; see 7.5.6, "Incremental Updates." The value of this entry shall be a name object, not a number, and therefore shall be preceded by a SOLIDUS (2Fh) character (/) when written in the PDF file (for example, /1.4).>
  state <Extensions>
    field dictionary
    force false
    value <An extensions dictionary containing developer prefix identification and version numbers for developer extensions that occur in this document. 7.12, “Extensions Dictionary”, describes this dictionary and how it shall be used.>
  state <Pages>
    field dictionary
    force true
    value <The page tree node that shall be the root of the document’s page tree (see 7.7.3, "Page Tree").>
  state <PageLabels>
    field number tree
    force false
    value <A number tree (see 7.9.7, "Number Trees") defining the page labelling for the document. The keys in this tree shall be page indices; the corresponding values shall be page label dictionaries (see 12.4.2, "Page Labels"). Each page index shall denote the first page in a labelling range to which the specified page label dictionary applies. The tree shall include a value for page index 0.>
  state <Names>
    field dictionary
    force false
    value <The document’s name dictionary (see 7.7.4, "Name Dictionary").>
  state <Dests>
    field dictionary
    force false
    value <A dictionary of names and corresponding destinations (see 12.3.2.3, "Named Destinations").>
  state <ViewerPreferences>
    field dictionary
    force false
    value <A viewer preferences dictionary (see 12.2, "Viewer Preferences") specifying the way the document shall be displayed on the screen. If this entry is absent, conforming readers shall use their own current user preference settings.>
  state <PageLayout>
    field name
    force false
    value <A name object specifying the page layout shall be used when the document is opened: SinglePage Display one page at a time OneColumn Display the pages in one column TwoColumnLeft Display the pages in two columns, with odd- numbered pages on the left TwoColumnRight Display the pages in two columns, with odd- numbered pages on the right TwoPageLeft (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the left TwoPageRight (PDF 1.5) Display the pages two at a time, with odd-numbered pages on the right Default value: SinglePage.>
  state <PageMode>
    field name
    force false
    value <A name object specifying how the document shall be displayed when opened: UseNone Neither document outline nor thumbnail images visible UseOutlines Document outline visible UseThumbs Thumbnail images visible FullScreen Full-screen mode, with no menu bar, window controls, or any other window visible UseOC (PDF 1.5) Optional content group panel visible UseAttachments (PDF 1.6) Attachments panel visible Default value: UseNone.>
  state <Outlines>
    field dictionary
    force false
    value <The outline dictionary that shall be the root of the document’s outline hierarchy (see 12.3.3, "Document Outline").>
  state <Threads>
    field array
    force An array of thread dictionaries that shall represent the document’s article threads (see 12.4.3, "Articles").
    value
  state <OpenAction>
    field array or dictionary
    force false
    value <A value specifying a destination that shall be displayed or an action that shall be performed when the document is opened. The value shall be either an array defining a destination (see 12.3.2, "Destinations") or an action dictionary representing an action (12.6, "Actions"). If this entry is absent, the document shall be opened to the top of the first page at the default magnification factor.>
  state <AA>
    field dictionary
    force false
    value <An additional-actions dictionary defining the actions that shall be taken in response to various trigger events affecting the document as a whole (see 12.6.3, "Trigger Events").>
  state <URI>
    field dictionary
    force false
    value <A URI dictionary containing document-level information for URI (uniform resource identifier) actions (see 12.6.4.7, "URI Actions").>
  state <AcroForm>
    field dictionary
    force false
    value <The document’s interactive form (AcroForm) dictionary (see 12.7.2, "Interactive Form Dictionary").>
  state <Metadata>
    field stream
    force false
    value <A metadata stream that shall contain metadata for the document (see 14.3.2, "Metadata Streams").>
  state <StructTreeRoot>
    field dictionary
    force false
    value <The document’s structure tree root dictionary (see 14.7.2, "Structure Hierarchy").>
  state <MarkInfo>
    field dictionary
    force false
    value <A mark information dictionary that shall contain information about the document’s usage of Tagged PDF conventions (see 14.7, "Logical Structure").>
  state <Lang>
    field text
    force false
    value <A language identifier that shall specify the natural language for all text in the document except where overridden by language specifications for structure elements or marked content (see 14.9.2, "Natural Language Specification"). If this entry is absent, the language shall be considered unknown.>
  state <SpiderInfo>
    field dictionary
    force false
    value <A Web Capture information dictionary that shall contain state information used by any Web Capture extension (see 14.10.2, "Web Capture Information Dictionary").>
  state <OutputIntents>
    field array
    force false
    value <An array of output intent dictionaries that shall specify the colour characteristics of output devices on which the document might be rendered (see 14.11.5, "Output Intents").>
  state <PieceInfo>
    field dictionary
    force false
    value <A page-piece dictionary associated with the document (see 14.5, "Page-Piece Dictionaries").>
  state <OCProperties>
    field dictionary
    force false
    value <The document’s optional content properties dictionary (see 8.11.4, "Configuring Optional Content").>
  state <Perms>
    field dictionary
    force false
    value <A permissions dictionary that shall specify user access permissions for the document. 12.8.4, "Permissions", describes this dictionary and how it shall be used.>
  state <Legal>
    field dictionary
    force false
    value <A dictionary that shall contain attestations regarding the content of a PDF document, as it relates to the legality of digital signatures (see 12.8.5, "Legal Content Attestations").>
  state <Requirements>
    field array
    force false
    value <An array of requirement dictionaries that shall represent requirements for the document. 12.10, "Document Requirements", describes this dictionary and how it shall be used.>
  state <Collection>
    field dictionary
    force false
    value <A collection dictionary that a conforming reader shall use to enhance the presentation of file attachments stored in the PDF document. (see 12.3.5, "Collections").>
  state <NeedsRendering>
    field boolean
    force false
    value <A flag used to expedite the display of PDF documents containing XFA forms. It specifies whether the document shall be regenerated when the document is first opened. See the XML Forms Architecture (XFA) Specification (Bibliography). Default value: false.>

block table-29-required-entries-in-a-page-tree-node
  state <Type>
    field name
    force true
    value <The type of PDF object that this dictionary describes; shall be Pages for a page tree node.>
  state <Parent>
    field dictionary
    force true
    value <The page tree node that is the immediate parent of this one.>
  state <Kids>
    field array
    force true
    value <An array of indirect references to the immediate children of this node. The children shall only be page objects or other page tree nodes.>
  state <Count>
    field integer
    force true
    value <The number of leaf nodes (page objects) that are descendants of this node within the page tree.>

block page-object
  state <Type>
    field name
    force true
    value <The type of PDF object that this dictionary describes; shall be Page for a page object.>
  state <Parent>
    field dictionary
    force true
    value <The page tree node that is the immediate parent of this page object.>
  state <LastModified>
    field date
    force true
    value <The date and time (see 7.9.4, "Dates") when the page’s contents were most recently modified. If a page-piece dictionary (PieceInfo) is present, the modification date shall be used to ascertain which of the application data dictionaries that it contains correspond to the current content of the page (see 14.5, "Page-Piece Dictionaries").>
  state <Resources>
    field dictionary
    force true
    value <A dictionary containing any resources required by the page (see 7.8.3, "Resource Dictionaries"). If the page requires no resources, the value of this entry shall be an empty dictionary. Omitting the entry entirely indicates that the resources shall be inherited from an ancestor node in the page tree.>
  state <MediaBox>
    field rectangle
    force true
    value <A rectangle (see 7.9.5, "Rectangles"), expressed in default user space units, that shall define the boundaries of the physical medium on which the page shall be displayed or printed (see 14.11.2, "Page Boundaries").>
  state <CropBox>
    field rectangle
    force false
    value <A rectangle, expressed in default user space units, that shall define the visible region of default user space. When the page is displayed or printed, its contents shall be clipped (cropped) to this rectangle and then shall be imposed on the output medium in some implementation-defined manner (see 14.11.2, "Page Boundaries"). Default value: the value of MediaBox.>
  state <BleedBox>
    field rectangle
    force false
    value <A rectangle, expressed in default user space units, that shall define the region to which the contents of the page shall be clipped when output in a production environment (see 14.11.2, "Page Boundaries"). Default value: the value of CropBox.>
  state <TrimBox>
    field rectangle
    force false
    value <A rectangle, expressed in default user space units, that shall define the intended dimensions of the finished page after trimming (see 14.11.2, "Page Boundaries"). Default value: the value of CropBox.>
  state <ArtBox>
    field rectangle
    force false
    value <A rectangle, expressed in default user space units, that shall define the extent of the page’s meaningful content (including potential white space) as intended by the page’s creator (see 14.11.2, "Page Boundaries"). Default value: the value of CropBox.>
  state <BoxColorInfo>
    field dictionary
    force false
    value <A box colour information dictionary that shall specify the colours and other visual characteristics that should be used in displaying guidelines on the screen for the various page boundaries (see 14.11.2.2, "Display of Page Boundaries"). If this entry is absent, the application shall use its own current default settings.>
  state <Contents>
    field stream
    field array
    force false
    value <A content stream (see 7.8.2, "Content Streams") that shall describe the contents of this page. If this entry is absent, the page shall be empty. The value shall be either a single stream or an array of streams. If the value is an array, the effect shall be as if all of the streams in the array were concatenated, in order, to form a single stream. Conforming writers can create image objects and other resources as they occur, even though they interrupt the content stream. The division between streams may occur only at the boundaries between lexical tokens (see 7.2, "Lexical Conventions") but shall be unrelated to the page’s logical content or organization. Applications that consume or produce PDF files need not preserve the existing structure of the Contents array. Conforming writers shall not create a Contents array containing no elements.>
  state <Rotate>
    field integer
    force false
    value <The number of degrees by which the page shall be rotated clockwise when displayed or printed. The value shall be a multiple of 90. Default value: 0.>
  state <Group>
    field dictionary
    force false
    value <A group attributes dictionary that shall specify the attributes of the page’s page group for use in the transparent imaging model (see 11.4.7, "Page Group" and 11.6.6, "Transparency Group XObjects").>
  state <Thumb>
    field stream
    force false
    value <A stream object that shall define the page’s thumbnail image (see 12.3.4, "Thumbnail Images").>
  state <B>
    field array
    force false
    value <An array that shall contain indirect references to all article beads appearing on the page (see 12.4.3, "Articles"). The beads shall be listed in the array in natural reading order. NOTE The information in this entry can be created or recreated from the information obtained from the Threads key in the Catalog.>
  state <Dur>
    field number
    force false
    value <The page’s display duration (also called its advance timing): the maximum length of time, in seconds, that the page shall be displayed during presentations before the viewer application shall automatically advance to the next page (see 12.4.4, "Presentations"). By default, the viewer shall not advance automatically.>
  state <Trans>
    field dictionary
    force false
    value <A transition dictionary describing the transition effect that shall be used when displaying the page during presentations (see 12.4.4, "Presentations").>
  state <Annots>
    field array
    force false
    value <An array of annotation dictionaries that shall contain indirect references to all annotations associated with the page (see 12.5, "Annotations").>
  state <AA>
    field dictionary
    force false
    value <An additional-actions dictionary that shall define actions to be performed when the page is opened or closed (see 12.6.3, "Trigger Events"). (PDF 1.3) additional-actions dictionaries are not inheritable.>
  state <Metadata>
    field stream
    force false
    value <A metadata stream that shall contain metadata for the page (see 14.3.2, "Metadata Streams").>
  state <PieceInfo>
    field dictionary
    force false
    value <A page-piece dictionary associated with the page (see 14.5, "Page-Piece Dictionaries").>
  state <StructParents>
    field integer
    force true
    value <The integer key of the page’s entry in the structural parent tree (see 14.7.4.4, "Finding Structure Elements from Content Items").>
  state <ID>
    field byte string
    force false
    value <The digital identifier of the page’s parent Web Capture content set (see 14.10.6, "Object Attributes Related to Web Capture").>
  state <PZ>
    field number
    force false
    value <The page’s preferred zoom (magnification) factor: the factor by which it shall be scaled to achieve the natural display magnification (see 14.10.6, "Object Attributes Related to Web Capture").>
  state <SeparationInfo>
    field dictionary
    force false
    value <A separation dictionary that shall contain information needed to generate colour separations for the page (see 14.11.4, "Separation Dictionaries").>
  state <Tabs>
    field name
    force false
    value <A name specifying the tab order that shall be used for annotations on the page. The possible values shall be R (row order), C (column order), and S (structure order). See 12.5, "Annotations" for details.>
  state <TemplateInstantiated>
    field name
    force true
    value <The name of the originating page object (see 12.7.6, "Named Pages").>
  state <PresSteps>
    field dictionary
    force false
    value <A navigation node dictionary that shall represent the first node on the page (see 12.4.4.2, "Sub-page Navigation").>
  state <UserUnit>
    field number
    force false
    value <A positive number that shall give the size of default user space units, in multiples of 1⁄72 inch. The range of supported values shall be implementation-dependent. Default value: 1.0 (user space unit is 1⁄72 inch).>
  state <VP>
    field dictionary
    force false
    value <An array of viewport dictionaries (see Table 260) that shall specify rectangular regions of the page.>

block name-dictionary
  state <Dests>
    field name tree
    force false
    value <A name tree mapping name strings to destinations (see 12.3.2.3, "Named Destinations").>
  state <AP>
    field name tree
    force false
    value <A name tree mapping name strings to annotation appearance streams (see 12.5.5, "Appearance Streams").>
  state <JavaScript>
    field name tree
    force false
    value <A name tree mapping name strings to document-level JavaScript actions (see 12.6.4.16, "JavaScript Actions").>
  state <Pages>
    field name tree
    force false
    value <A name tree mapping name strings to visible pages for use in interactive forms (see 12.7.6, "Named Pages").>
  state <Templates>
    field name tree
    force false
    value <A name tree mapping name strings to invisible (template) pages for use in interactive forms (see 12.7.6, "Named Pages").>
  state <IDS>
    field name tree
    force false
    value <A name tree mapping digital identifiers to Web Capture content sets (see 14.10.4, "Content Sets").>
  state <URLS>
    field name tree
    force false
    value <A name tree mapping uniform resource locators (URLs) to Web Capture content sets (see 14.10.4, "Content Sets").>
  state <EmbeddedFiles>
    field name tree
    force false
    value <A name tree mapping name strings to file specifications for embedded file streams (see 7.11.4, "Embedded File Streams").>
  state <AlternatePresentations>
    field name tree
    force false
    value <A name tree mapping name strings to alternate presentations (see 13.5, "Alternate Presentations").>
  state <Renditions>
    field name tree
    force false
    value <A name tree mapping name strings (which shall have Unicode encoding) to rendition objects (see 13.2.3, "Renditions").>

block table-32-compatibility-operators
  Operator <BX>
    brief <(PDF 1.1) Begin a compatibility section. Unrecognized operators (along with their operands) shall be ignored without error until the balancing EX operator is encountered.>
  Operator <EX>
    brief <(PDF 1.1) End a compatibility section begun by a balancing BX operator. Ignore any unrecognized operands and operators from previous matching BX onward.>

block resource-dictionary
  state <ExtGState>
    field dictionary
    force false
    value <A dictionary that maps resource names to graphics state parameter dictionaries (see 8.4.5, "Graphics State Parameter Dictionaries").>
  state <ColorSpace>
    field dictionary
    force false
    value <A dictionary that maps each resource name to either the name of a device-dependent colour space or an array describing a colour space (see 8.6, "Colour Spaces").>
  state <Pattern>
    field dictionary
    force false
    value <A dictionary that maps resource names to pattern objects (see 8.7, "Patterns").>
  state <Shading>
    field dictionary
    force false
    value <A dictionary that maps resource names to shading dictionaries (see 8.7.4.3, "Shading Dictionaries").>
  state <XObject>
    field dictionary
    force false
    value <A dictionary that maps resource names to external objects (see 8.8, "External Objects").>
  state <Font>
    field dictionary
    force false
    value <A dictionary that maps resource names to font dictionaries (see clause 9, "Text").>
  state <ProcSet>
    field array
    force false
    value <An array of predefined procedure set names (see 14.2, "Procedure Sets").>
  state <Properties>
    field dictionary
    force false
    value <A dictionary that maps resource names to property list dictionaries for marked content (see 14.6.2, "Property Lists").>

block name-tree-node-dictionary
  state <Kids>
    field array
    value <(Root and intermediate nodes only; required in intermediate nodes; present in the root node if and only if Names is not present) Shall be an array of indirect references to the immediate children of this node. The children may be intermediate or leaf nodes.>
  state <Names>
    field array
    value <(Root and leaf nodes only; required in leaf nodes; present in the root node if and only if Kids is not present) Shall be an array of the form [key1 value1 key2 value2 … keyn valuen] where each keyi shall be a string and the corresponding valuei shall be the object associated with that key. The keys shall be sorted in lexical order, as described below.>
  state <Limits>
    field array
    value <(Intermediate and leaf nodes only; required) Shall be an array of two strings, that shall specify the (lexically) least and greatest keys included in the Names array of a leaf node or in the Names arrays of any leaf nodes that are descendants of an intermediate node.>

block number-tree-node-dictionary
  state <Kids>
    field array
    value <(Root and intermediate nodes only; required in intermediate nodes; present in the root node if and only if Nums is not present) Shall be an array of indirect references to the immediate children of this node. The children may be intermediate or leaf nodes.>
  state <Nums>
    field array
    value <(Root and leaf nodes only; shall be required in leaf nodes; present in the root node if and only if Kids is not present) Shall be an array of the form [key1 value1 key2 value2 … keyn valuen] where each keyi is an integer and the corresponding valuei shall be the object associated with that key. The keys shall be sorted in numerical order, analogously to the arrangement of keys in a name tree as described in 7.9.6, "Name Trees.">
  state <Limits>
    field array
    value <(Shall be present in Intermediate and leaf nodes only) Shall be an array of two integers, that shall specify the (numerically) least and greatest keys included in the Nums array of a leaf node or in the Nums arrays of any leaf nodes that are descendants of an intermediate node.>

block table-38-entries-common-to-all-function-dictionaries
  state <FunctionType>
    field integer
    force true
    value <The function type: 0 Sampled function 2 Exponential interpolation function 3 Stitching function 4 PostScript calculator function>
  state <Domain>
    field array
    force true
    value <An array of 2 × m numbers, where m shall be the number of input values. For each i from 0 to m − 1, Domain2i shall be less than of input values. For each i from 0 to m − 1, Domain2i shall be less than interval Domain2i ≤ xi ≤ Domain2i+1. Input values outside the declared domain shall be clipped to the nearest boundary value.>
  state <Range>
    field array
    force true
    value <An array of 2 × n numbers, where n shall be the number of output values. For each j from 0 to n − 1, Range2j shall be less than or equal to Range2j+1, and the jth output value, yj , shall lie in the interval Range2j ≤ yj ≤ Range2j+1. Output values outside the declared range shall be clipped to the nearest boundary value. If this entry is absent, no clipping shall be done.>

block table-39-additional-entries-specific-to-a-type-0-function-dictionary
  state <Size>
    field array
    force true
    value <An array of m positive integers that shall specify the number of samples in each input dimension of the sample table.>
  state <BitsPerSample>
    field integer
    force true
    value <The number of bits that shall represent each sample. (If the function has multiple output values, each one shall occupy BitsPerSample bits.) Valid values shall be 1, 2, 4, 8, 12, 16, 24, and 32.>
  state <Order>
    field integer
    force false
    value <The order of interpolation between samples. Valid values shall be 1 and 3, specifying linear and cubic spline interpolation, respectively. Default value: 1.>
  state <Encode>
    field array
    force false
    value <An array of 2 × m numbers specifying the linear mapping of input values into the domain of the function’s sample table. Default value: [0 (Size0 − 1) 0 (Size1 − 1) …].>
  state <Decode>
    field array
    force false
    value <An array of 2 × n numbers specifying the linear mapping of sample values into the range appropriate for the function’s output values. Default value: same as the value of Range.>
  state <other stream attributes>
    field (various)
    force false
    value <Other attributes of the stream that shall provide the sample values, as appropriate (see Table 5).>

block table-40-additional-entries-specific-to-a-type-2-function-dictionary
  state <C0>
    field array
    force false
    value <An array of n numbers that shall define the function result when x = 0.0. Default value: [0.0].>
  state <C1>
    field array
    force false
    value <An array of n numbers that shall define the function result when x = 1.0. Default value: [1.0].>
  state <N>
    field number
    force true
    value <The interpolation exponent. Each input value x shall return n values, given by yj = C0j + xN × (C1j − C0j), for 0 ≤ j < n.>

block table-41-additional-entries-specific-to-a-type-3-function-dictionary
  state <Functions>
    field array
    force true
    value <An array of k 1-input functions that shall make up the stitching function. The output dimensionality of all functions shall be the same, and compatible with the value of Range if Range is present.>
  state <Bounds>
    field array
    force true
    value <An array of k − 1 numbers that, in combination with Domain, shall define the intervals to which each function from the Functions array shall apply. Bounds elements shall be in order of increasing value, and each value shall be within the domain defined by Domain.>
  state <Encode>
    field array
    force true
    value <An array of 2 × k numbers that, taken in pairs, shall map each subset of the domain defined by Domain and the Bounds array to the domain of the corresponding function.>

block file-specification-dictionary
  state <Type>
    field name
    force true
    value <The type of PDF object that this dictionary describes; shall be Filespec for a file specification dictionary.>
  state <FS>
    field name
    force false
    value <The name of the file system that shall be used to interpret this file specification. If this entry is present, all other entries in the dictionary shall be interpreted by the designated file system. PDF shall define only one standard file system name, URL (see 7.11.5, "URL Specifications"); an application can register other names (see Annex E). This entry shall be independent of the F, UF, DOS, Mac, and Unix entries.>
  state <F>
    field string
    force true
    value <A file specification string of the form described in 7.11.2, "File Specification Strings," or (if the file system is URL) a uniform resource locator, as described in 7.11.5, "URL Specifications." The UF entry should be used in addition to the F entry. The UF entry provides cross-platform and cross-language compatibility and the F entry provides backwards compatibility.>
  state <UF>
    field text
    force false
    value <A Unicode text string that provides file specification of the form described in 7.11.2, "File Specification Strings." This is a text string encoded using PDFDocEncoding or UTF-16BE with a leading byte-order marker (as defined in 7.9.2.2, "Text String Type"). The F entry should be included along with this entry for backwards compatibility reasons.>
  state <DOS>
    field byte string
    force false
    value <A file specification string (see 7.11.2, "File Specification Strings") representing a DOS file name. This entry is obsolescent and should not be used by conforming writers.>
  state <Mac>
    field byte string
    force false
    value <A file specification string (see 7.11.2, "File Specification Strings") representing a Mac OS file name. This entry is obsolescent and should not be used by conforming writers.>
  state <Unix>
    field byte string
    force false
    value <A file specification string (see 7.11.2, "File Specification Strings") representing a UNIX file name. This entry is obsolescent and should not be used by conforming writers.>
  state <ID>
    field array
    force false
    value <An array of two byte strings constituting a file identifier (see 14.4, "File Identifiers") that should be included in the referenced file. NOTE The use of this entry improves an application’s chances of finding the intended file and allows it to warn the user if the file has changed since the link was made.>
  state <V>
    field boolean
    force false
    value <A flag indicating whether the file referenced by the file specification is volatile (changes frequently with time). If the value is true, applications shall not cache a copy of the file. For example, a movie annotation referencing a URL to a live video camera could set this flag to true to notify the conforming reader that it should re-acquire the movie each time it is played. Default value: false.>
  state <EF>
    field dictionary
    force true
    value <A dictionary containing a subset of the keys F, UF, DOS, Mac, and Unix, corresponding to the entries by those names in the file specification dictionary. The value of each such key shall be an embedded file stream (see 7.11.4, "Embedded File Streams") containing the corresponding file. If this entry is present, the Type entry is required and the file specification dictionary shall be indirectly referenced. The F and UF entries should be used in place of the DOS, Mac, or Unix entries.>
  state <RF>
    field dictionary
    force false
    value <A dictionary with the same structure as the EF dictionary, which shall be present. Each key in the RF dictionary shall also be present in the EF dictionary. Each value shall be a related files array (see 7.11.4.2, "Related Files Arrays") identifying files that are related to the corresponding file in the EF dictionary. If this entry is present, the Type entry is required and the file specification dictionary shall be indirectly referenced.>
  state <Desc>
    field text
    force false
    value <Descriptive text associated with the file specification. It shall be used for files in the EmbeddedFiles name tree (see 7.7.4, "Name Dictionary").>
  state <CI>
    field dictionary
    force false
    value <A collection item dictionary, which shall be used to create the user interface for portable collections (see 7.11.6, "Collection Items").>

block table-45-additional-entries-in-an-embedded-file-stream-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be EmbeddedFile for an embedded file stream.>
  state <Subtype>
    field name
    force false
    value <The subtype of the embedded file. The value of this entry shall be a first-class name, as defined in Annex E. Names without a registered prefix shall conform to the MIME media type names defined in Internet RFC 2046, Multipurpose Internet Mail Extensions (MIME), Part Two: Media Types (see the Bibliography), with the provision that characters not allowed in names shall use the 2-character hexadecimal code format described in 7.3.5, "Name Objects.">
  state <Params>
    field dictionary
    force false
    value <An embedded file parameter dictionary that shall contain additional file-specific information (see Table 46).>

block embedded-file-parameter-dictionary
  state <Size>
    field integer
    force false
    value <The size of the uncompressed embedded file, in bytes.>
  state <CreationDate>
    field date
    force false
    value <The date and time when the embedded file was created.>
  state <ModDate>
    field date
    force false
    value <The date and time when the embedded file was last modified.>
  state <Mac>
    field dictionary
    force false
    value <A subdictionary containing additional information specific to Mac OS files (see Table 47).>
  state <CheckSum>
    field string
    force false
    value <A 16-byte string that is the checksum of the bytes of the uncompressed embedded file. The checksum shall be calculated by applying the standard MD5 message-digest algorithm (described in Internet RFC 1321, The MD5 Message-Digest Algorithm; see the Bibliography) to the bytes of the embedded file stream.>

block mac-os-file-information-dictionary
  state <Subtype>
    field integer
    force false
    value <The embedded file’s file type. It shall be encoded as an integer according to Mac OS conventions: a 4-character ASCII text literal, that shall be a 32-bit integer, with the high-order byte first. EXAMPLE The file type “CARO” is represented as the hexadecimal integer 4341524F, which is expressed in decimal as 1128354383.>
  state <Creator>
    field integer
    force false
    value <The embedded file’s creator signature shall be encoded in the same way as Subtype.>
  state <ResFork>
    field stream
    force false
    value <The binary contents of the embedded file’s resource fork.>

block collection-item-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be CollectionItem for a collection item dictionary.>
  state <Other keys>
    field text, date, number or dictionary
    force false
    value <Provides the data corresponding to the related fields in the collection dictionary. If the entry is a dictionary, then it shall be a collection subitem dictionary (see Table 49). The type of each entry shall match the type of data identified by the collection field dictionary (see Table 157) referenced by the same key in the collection schema dictionary (see Table 156). EXAMPLE If the corresponding collection field has a Subtype entry of S, then the entry is a text string. A single collection item dictionary may contain multiple entries, with one entry representing each key (see EXAMPLE 1 in 12.3.5, "Collections").>

block collection-subitem-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be CollectionSubitem for a collection item dictionary.>
  state <D>
    field text, date, or number
    force false
    value <The data corresponding to the related entry in the collection field dictionary (see Table 157). The type of data shall match the data type identified by the corresponding collection field dictionary. Default: none.>
  state <P>
    field text
    force false
    value <A prefix string that shall be concatenated with the text string presented to the user. This entry is ignored when a conforming reader sorts the items in the collection. Default: none.>

block developer-extensions-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be DeveloperExtensions.>
  state <BaseVersion>
    field name
    force true
    value <The name of the PDF version to which this extension applies. The name shall be consistent with the syntax used for the Version entry of the catalog dictionary (see 7.7.2, “Document Catalog”).>
  state <ExtensionLevel>
    field integer
    force true
    value <An integer defined by the developer to denote the extension being used. If the developer introduces more than one extension to a given BaseVersion the extension level numbers assigned by that developer shall increase over time.>

block table-57-graphics-state-operators
  block —
    brand <q>
    brief <Save the current graphics state on the graphics state stack (see 8.4.2, "Graphics State Stack").>
  block —
    brand <Q>
    brief <Restore the graphics state by removing the most recently saved state from the stack and making it the current state (see 8.4.2, "Graphics State Stack").>
  block a b c d e f
    brand <cm>
    brief <Modify the current transformation matrix (CTM) by concatenating the specified matrix (see 8.3.2, "Coordinate Spaces"). Although the operands specify a matrix, they shall be written as six separate numbers, not as an array.>
  block lineWidth
    brand <w>
    brief <Set the line width in the graphics state (see 8.4.3.2, "Line Width").>
  block lineCap
    brand <J>
    brief <Set the line cap style in the graphics state (see 8.4.3.3, "Line Cap Style").>
  block lineJoin
    brand <j>
    brief <Set the line join style in the graphics state (see 8.4.3.4, "Line Join Style").>
  block miterLimit
    brand <M>
    brief <Set the miter limit in the graphics state (see 8.4.3.5, "Miter Limit").>
  block dashArray dashPhase
    brand <d>
    brief <Set the line dash pattern in the graphics state (see 8.4.3.6, "Line Dash Pattern").>
  block intent
    brand <ri>
    brief <(PDF 1.1) Set the colour rendering intent in the graphics state (see 8.6.5.8, "Rendering Intents").>
  block flatness
    brand <i>
    brief <Set the flatness tolerance in the graphics state (see 10.6.2, "Flatness Tolerance"). flatness is a number in the range 0 to 100; a value of 0 shall specify the output device’s default flatness tolerance.>
  block dictName
    brand <gs>
    brief <(PDF 1.2) Set the specified parameters in the graphics state. dictName shall be the name of a graphics state parameter dictionary in the ExtGState subdictionary of the current resource dictionary (see the next sub-clause).>

block graphics-state-parameter-dictionary
  state <Type>
    field name
    force false
    brief <The type of PDF object that this dictionary describes; shall be ExtGState for a graphics state parameter dictionary.>
  state <LW>
    field number
    force false
    brief <The line width (see 8.4.3.2, "Line Width").>
  state <LC>
    field integer
    force false
    brief <The line cap style (see 8.4.3.3, "Line Cap Style").>
  state <LJ>
    field integer
    force false
    brief <The line join style (see 8.4.3.4, "Line Join Style").>
  state <ML>
    field number
    force false
    brief <The miter limit (see 8.4.3.5, "Miter Limit").>
  state <D>
    field array
    force false
    brief <The line dash pattern, expressed as an array of the form [dashArray dashPhase], where dashArray shall be itself an array and dashPhase shall be an integer (see 8.4.3.6, "Line Dash Pattern").>
  state <RI>
    field name
    force false
    brief <The name of the rendering intent (see 8.6.5.8, "Rendering Intents").>
  state <OP>
    field boolean
    force false
    brief <A flag specifying whether to apply overprint (see 8.6.7, "Overprint Control"). In PDF 1.2 and earlier, there is a single overprint parameter that applies to all painting operations. Beginning with PDF 1.3, there shall be two separate overprint parameters: one for stroking and one for all other painting operations. Specifying an OP entry shall set both parameters unless there is also an op entry in the same graphics state parameter dictionary, in which case the OP entry shall set only the overprint parameter for stroking.>
  state <op>
    field boolean
    force false
    brief <A flag specifying whether to apply overprint (see 8.6.7, "Overprint Control") for painting operations other than stroking. If this entry is absent, the OP entry, if any, shall also set this parameter.>
  state <OPM>
    field integer
    force false
    brief <The overprint mode (see 8.6.7, "Overprint Control").>
  state <Font>
    field array
    force false
    brief <An array of the form [font size], where font shall be an indirect reference to a font dictionary and size shall be a number expressed in text space units. These two objects correspond to the operands of the Tf operator (see 9.3, "Text State Parameters and Operators"); however, the first operand shall be an indirect object reference instead of a resource name.>
  state <BG>
    field function
    force false
    brief <The black-generation function, which maps the interval [ 0.0 1.0] to the interval [0.0 1.0] (see 10.3.4, "Conversion from DeviceRGB to DeviceCMYK").>
  state <BG2>
    field function
    field name
    force false
    brief <Same as BG except that the value may also be the name Default, denoting the black-generation function that was in effect at the start of the page. If both BG and BG2 are present in the same graphics state parameter dictionary, BG2 shall take precedence.>
  state <UCR>
    field function
    force false
    brief <The undercolor-removal function, which maps the interval [ 0.0 1.0] to the interval [−1.0 1.0] (see 10.3.4, "Conversion from DeviceRGB to DeviceCMYK").>
  state <UCR2>
    field function
    field name
    force false
    brief <Same as UCR except that the value may also be the name Default, denoting the undercolor-removal function that was in effect at the start of the page. If both UCR and UCR2 are present in the same graphics state parameter dictionary, UCR2 shall take precedence.>
  state <TR>
    field function, array, or name
    force false
    brief <The transfer function, which maps the interval [ 0.0 1.0 ] to the interval [0.0 1.0] (see 10.4, "Transfer Functions"). The value shall be either a single function (which applies to all process colorants) or an array of four functions (which apply to the process colorants individually). The name Identity may be used to represent the identity function.>
  state <TR2>
    field function, array, or name
    force false
    brief <Same as TR except that the value may also be the name Default, denoting the transfer function that was in effect at the start of the page. If both TR and TR2 are present in the same graphics state parameter dictionary, TR2 shall take precedence.>
  state <HT>
    field dictionary, stream, or name
    force false
    brief <The halftone dictionary or stream (see 10.5, "Halftones") or the name Default, denoting the halftone that was in effect at the start of the page.>
  state <FL>
    field number
    force false
    brief <The flatness tolerance (see 10.6.2, "Flatness Tolerance").>
  state <SM>
    field number
    force false
    brief <The smoothness tolerance (see 10.6.3, "Smoothness Tolerance").>
  state <SA>
    field boolean
    force A flag specifying whether to apply automatic stroke adjustment (see 10.6.5, "Automatic Stroke Adjustment").
    brief
  state <BM>
    field name
    field array
    force false
    brief <The current blend mode to be used in the transparent imaging model (see 11.3.5, "Blend Mode" and 11.6.3, "Specifying Blending Colour Space and Blend Mode").>
  state <SMask>
    field dictionary or name
    force false
    brief <The current soft mask, specifying the mask shape or mask opacity values that shall be used in the transparent imaging model (see 11.3.7.2, "Source Shape and Opacity" and 11.6.4.3, "Mask Shape and Opacity"). Although the current soft mask is sometimes referred to as a “soft clip,” altering it with the gs operator completely replaces the old value with the new one, rather than intersecting the two as is done with the current clipping path parameter (see 8.5.4, "Clipping Path Operators").>
  state <CA>
    field number
    force false
    brief <The current stroking alpha constant, specifying the constant shape or constant opacity value that shall be used for stroking operations in the transparent imaging model (see 11.3.7.2, "Source Shape and Opacity" and 11.6.4.4, "Constant Shape and Opacity").>
  state <ca>
    field number
    force false
    brief <Same as CA, but for nonstroking operations.>
  state <AIS>
    field boolean
    force false
    brief <The alpha source flag (“alpha is shape”), specifying whether the current soft mask and alpha constant shall be interpreted as shape values (true) or opacity values (false).>
  state <TK>
    field boolean
    force false
    brief <The text knockout flag, shall determine the behaviour of overlapping glyphs within a text object in the transparent imaging model (see 9.3.8, "Text Knockout").>

block table-59-path-construction-operators
  block x y
    brand <m>
    brief <Begin a new subpath by moving the current point to coordinates (x, y), omitting any connecting line segment. If the previous path construction operator in the current path was also m, the new m overrides it; no vestige of the previous m operation remains in the path.>
  block x y
    brand <l (lowercase L)>
    brief <Append a straight line segment from the current point to the point (x, y). The new current point shall be (x, y).>
  block x1 y1 x2 y2 x3 y3
    brand <c>
    brief <Append a cubic Bézier curve to the current path. The curve shall extend from the current point to the point (x3, y3 ), using (x1 , y1 ) and (x2 , y2 ) as the Bézier control points (see 8.5.2.2, "Cubic Bézier Curves"). The new current point shall be (x3 , y3 ).>
  block Table 59 – Path Construction Operators (continued)
    brand
<    brief>
  block Operands
    brand <Operator>
    brief <Description>
  block x2 y2 x3 y3
    brand <v>
    brief <Append a cubic Bézier curve to the current path. The curve shall extend from the current point to the point (x3 , y3 ), using the current point and (x2 , y2 ) as the Bézier control points (see 8.5.2.2, "Cubic Bézier Curves"). The new current point shall be (x3 , y3 ).>
  block x1 y1 x3 y3
    brand <y>
    brief <Append a cubic Bézier curve to the current path. The curve shall extend from the current point to the point (x3 , y3 ), using (x1 , y1 ) and (x3 , y3 ) as the Bézier control points (see 8.5.2.2, "Cubic Bézier Curves"). The new current point shall be (x3 , y3 ).>
  block —
    brand <h>
    brief <Close the current subpath by appending a straight line segment from the current point to the starting point of the subpath. If the current subpath is already closed, h shall do nothing. This operator terminates the current subpath. Appending another segment to the current path shall begin a new subpath, even if the new segment begins at the endpoint reached by the h operation.>
  block x y width height
    brand <re>
    brief <Append a rectangle to the current path as a complete subpath, with lower-left corner (x, y) and dimensions width and height in user space. The operation x y width height re is equivalent to x y m (x + width) y l (x + width) (y + height ) l x (y + height) l h>

block table-60-path-painting-operators
  block —
    brand <S>
    brief <Stroke the path.>
  block —
    brand <s>
    brief <Close and stroke the path. This operator shall have the same effect as the sequence h S.>
  block —
    brand <f>
    brief <Fill the path, using the nonzero winding number rule to determine the region to fill (see 8.5.3.3.2, "Nonzero Winding Number Rule"). Any subpaths that are open shall be implicitly closed before being filled.>
  block —
    brand <F>
    brief <Equivalent to f; included only for compatibility. Although PDF reader applications shall be able to accept this operator, PDF writer applications should use f instead.>
  block —
    brand <f*>
    brief <Fill the path, using the even-odd rule to determine the region to fill (see 8.5.3.3.3, "Even-Odd Rule").>
  block —
    brand <B>
    brief <Fill and then stroke the path, using the nonzero winding number rule to determine the region to fill. This operator shall produce the same result as constructing two identical path objects, painting the first with f and the second with S. NOTE The filling and stroking portions of the operation consult different values of several graphics state parameters, such as the current colour. See also 11.7.4.4, "Special Path-Painting Considerations".>
  block —
    brand <B*>
    brief <Fill and then stroke the path, using the even-odd rule to determine the region to fill. This operator shall produce the same result as B, except that the path is filled as if with f* instead of f. See also 11.7.4.4, "Special Path-Painting Considerations".>
  block —
    brand <b>
    brief <Close, fill, and then stroke the path, using the nonzero winding number rule to determine the region to fill. This operator shall have the same effect as the sequence h B. See also 11.7.4.4, "Special Path-Painting Considerations".>
  block —
    brand <b*>
    brief <Close, fill, and then stroke the path, using the even-odd rule to determine the region to fill. This operator shall have the same effect as the sequence h B*. See also 11.7.4.4, "Special Path-Painting Considerations".>
  block —
    brand <n>
    brief <End the path object without filling or stroking it. This operator shall be a path- painting no-op, used primarily for the side effect of changing the current clipping path (see 8.5.4, "Clipping Path Operators").>

block table-61-clipping-path-operators
  block —
    brand <W>
    brief <Modify the current clipping path by intersecting it with the current path, using the nonzero winding number rule to determine which regions lie inside the clipping path.>
  block —
    brand <W*>
    brief <Modify the current clipping path by intersecting it with the current path, using the even-odd rule to determine which regions lie inside the clipping path.>

block table-62-colour-space-families
  Device DeviceGray (PDF 1.1)
    CIE-based CalGray (PDF 1.1)
    Special Indexed (PDF 1.1)
  Device DeviceRGB (PDF 1.1)
    CIE-based CalRGB (PDF 1.1)
    Special Pattern (PDF 1.2)
  Device DeviceCMYK (PDF 1.1)
    CIE-based Lab (PDF 1.1)
    Special Separation (PDF 1.2)
  Device ICCBased (PDF 1.3)
    CIE-based DeviceN (PDF 1.3)
    Special

block calgray-colour-space-dictionary
  state <WhitePoint>
    field array
    force true
    value <An array of three numbers [XW YW ZW ] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse white point; see 8.6.5.3, "CalRGB Colour Spaces", for further discussion. The numbers XW and ZW shall be positive, and YW shall be equal to 1.0.>
  state <BlackPoint>
    field array
    force false
    value <An array of three numbers [XB YB ZB ] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point; see 8.6.5.3, "CalRGB Colour Spaces", for further discussion. All three of these numbers shall be non-negative. Default value: [0.0 0.0 0.0].>
  state <Gamma>
    field number
    force false
    value <A number G defining the gamma for the gray (A) component. G shall be positive and is generally greater than or equal to 1. Default value: 1.>

block calrgb-colour-space-dictionary
  state <WhitePoint>
    field array
    force true
    value <An array of three numbers [ XW YW ZW ] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse white point; see below for further discussion. The numbers XW and ZW shall be positive, and YW shall be equal to 1.0.>
  state <BlackPoint>
    field array
    force false
    value <An array of three numbers [ XB YB ZB] specifying the tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point; see below for further discussion. All three of these numbers shall be non-negative. Default value: [ 0.0 0.0 0.0].>
  state <Gamma>
    field array
    force false
    value <An array of three numbers [ GR GG GB ] specifying the gamma for the red, green, and blue (A, B, and C) components of the colour space. Default value: [1.0 1.0 1.0].>
  state <Matrix>
    field array
    force false
    value <An array of nine numbers [ XA YA ZA XB YB ZB XC YC ZC] specifying the linear interpretation of the decoded A, B, and C components of the colour space with respect to the final XYZ representation. Default value: the identity matrix [1 0 0 0 1 0 0 0 1].>

block lab-colour-space-dictionary
  state <WhitePoint>
    field array
    force true
    value <An array of three numbers [XW YW ZW ] that shall specify the tristimulus value, in the CIE 1931 XYZ space, of the diffuse white point; see 8.6.5.3, "CalRGB Colour Spaces" for further discussion. The numbers XW and ZW shall be positive, and YW shall be 1.0.>
  state <BlackPoint>
    field array
    force false
    value <An array of three numbers [XB YB ZB ] that shall specify the tristimulus value, in the CIE 1931 XYZ space, of the diffuse black point; see 8.6.5.3, "CalRGB Colour Spaces" for further discussion. All three of these numbers shall be non-negative. Default value: [ 0.0 0.0 0.0].>
  state <Range>
    field array
    force false
    value <An array of four numbers [amin amax bmin bmax] that shall specify the range of valid values for the a* and b* (B and C) components of the colour space—that is, amin ≤ a* ≤ amax and bmin ≤ b* ≤ bmax Component values falling outside the specified range shall be adjusted to the nearest valid value without error indication. Default value: [−100 100 −100 100].>

block table-66-additional-entries-specific-to-an-icc-profile-stream-dictionary
  state <N>
    field integer
    force true
    value <The number of colour components in the colour space described by the ICC profile data. This number shall match the number of components actually in the ICC profile. N shall be 1, 3, or 4.>
  state <Alternate>
    field array or name
    force false
    value <An alternate colour space that shall be used in case the one specified in the stream data is not supported. Non-conforming readers may use this colour space. The alternate space may be any valid colour space (except a Pattern colour space) that has the number of components specified by N. If this entry is omitted and the conforming reader does not understand the ICC profile data, the colour space that shall be used is DeviceGray, DeviceRGB, or DeviceCMYK, depending on whether the value of N is 1, 3, or 4, respectively. There shall not be conversion of source colour values, such as a tint transformation, when using the alternate colour space. Colour values within the range of the ICCBased colour space might not be within the range of the alternate colour space. In this case, the nearest values within the range of the alternate space shall be substituted.>
  state <Range>
    field array
    force false
    value <An array of 2 × N numbers [min0 max0 min1 max1 …] that shall specify the minimum and maximum valid values of the corresponding colour components. These values shall match the information in the ICC profile. Default value: [0.0 1.0 0.0 1.0 …].>
  state <Metadata>
    field stream
    force false
    value <A metadata stream that shall contain metadata for the colour space (see 14.3.2, "Metadata Streams").>

block table-70-rendering-intents
  state <AbsoluteColorimetric>
    brief <Colours shall be represented solely with respect to the light source; no correction shall be made for the output medium’s white point (such as the colour of unprinted paper). Thus, for example, a monitor’s white point, which is bluish compared to that of a printer’s paper, would be reproduced with a blue cast. In-gamut colours shall be reproduced exactly; out-of-gamut colours shall be mapped to the nearest value within the reproducible gamut. NOTE 1 This style of reproduction has the advantage of providing exact colour matches from one output medium to another. It has the disadvantage of causing colours with Y values between the medium’s white point and 1.0 to be out of gamut. A typical use might be for logos and solid colours that require exact reproduction across different media.>
  state <RelativeColorimetric>
    brief <Colours shall be represented with respect to the combination of the light source and the output medium’s white point (such as the colour of unprinted paper). Thus, a monitor’s white point can be reproduced on a printer by simply leaving the paper unmarked, ignoring colour differences between the two media. In-gamut colours shall be reproduced exactly; out-of-gamut colours shall be mapped to the nearest value within the reproducible gamut. NOTE 2 This style of reproduction has the advantage of adapting for the varying white points of different output media. It has the disadvantage of not providing exact colour matches from one medium to another. A typical use might be for vector graphics.>
  state <Saturation>
    brief <Colours shall be represented in a manner that preserves or emphasizes saturation. Reproduction of in-gamut colours may or may not be colourimetrically accurate. NOTE 3 A typical use might be for business graphics, where saturation is the most important attribute of the colour.>
  state <Perceptual>
    brief <Colours shall be represented in a manner that provides a pleasing perceptual appearance. To preserve colour relationships, both in-gamut and out-of-gamut colours shall be generally modified from their precise colourimetric values. NOTE 4 A typical use might be for scanned images.>

block devicen-colour-space-attributes-dictionary
  state <Subtype>
    field name
    force false
    value <A name specifying the preferred treatment for the colour space. Values shall be DeviceN or NChannel. Default value: DeviceN.>
  state <Colorants>
    field dictionary
    force true
    value <A dictionary describing the individual colorants that shall be used in the DeviceN colour space. For each entry in this dictionary, the key shall be a colorant name and the value shall be an array defining a Separation colour space for that colorant (see 8.6.6.4, "Separation Colour Spaces"). The key shall match the colorant name given in that colour space. This dictionary provides information about the individual colorants that may be useful to some conforming readers. In particular, the alternate colour space and tint transformation function of a Separation colour space describe the appearance of that colorant alone, whereas those of a DeviceN colour space describe only the appearance of its colorants in combination. If Subtype is NChannel, this dictionary shall have entries for all spot colorants in this colour space. This dictionary may also include additional colorants not used by this colour space.>
  state <Process>
    field dictionary
    force true
    value <A dictionary (see Table 72) that describes the process colour space whose components are included in this colour space.>
  state <MixingHints>
    field dictionary
    force false
    value <A dictionary (see Table 73) that specifies optional attributes of the inks that shall be used in blending calculations when used as an alternative to the tint transformation function.>

block devicen-process-dictionary
  KEY ColorSpace
    TYPE name or array
    force true
    VALUE A name or array identifying the process colour space, which may be any device or CIE-based colour space. If an ICCBased colour space is specified, it shall provide calibration information appropriate for the process colour components specified in the names array of the DeviceN colour space.
  KEY Components
    TYPE array
    force true
    VALUE An array of component names that correspond, in order, to the components of the process colour space specified in ColorSpace. For example, an RGB colour space shall have three names corresponding to red, green, and blue. The names may be arbitrary (that is, not the same as the standard names for the colour space components) and shall match those specified in the names array of the DeviceN colour space, even if all components are not present in the names array.

block devicen-mixing-hints-dictionary
  state <Solidities>
    field dictionary
    force false
    value <A dictionary specifying the solidity of inks that shall be used in blending calculations when used as an alternative to the tint transformation function. For each entry, the key shall be a colorant name, and the value shall be a number between 0.0 and 1.0. This dictionary need not contain entries for all colorants used in this colour space; it may also include additional colorants not used by this colour space. A value of 1.0 simulates an ink that completely covers the inks beneath; a value of 0.0 simulates a transparent ink that completely reveals the inks beneath. An entry with a key of Default specifies a value that shall be used by all components in the associated DeviceN colour space for which a solidity value is not explicitly provided. If Default is not present, the default value for unspecified colorants shall be 0.0; conforming readers may choose to use other values. If this entry is present, PrintingOrder shall also be present.>
  state <PrintingOrd er>
    field array
    force true
    value <An array of colorant names, specifying the order in which inks shall be laid down. Each component in the names array of the DeviceN colour space shall appear in this array (although the order is unrelated to the order specified in the names array). This entry may also list colorants unused by this specific DeviceN instance.>
  state <DotGain>
    field dictionary
    force false
    value <A dictionary specifying the dot gain of inks that shall be used in blending calculations when used as an alternative to the tint transformation function. Dot gain (or loss) represents the amount by which a printer’s halftone dots change as the ink spreads and is absorbed by paper. For each entry, the key shall be a colorant name, and the value shall be a function that maps values in the range 0 to 1 to values in the range 0 to 1. The dictionary may list colorants unused by this specific DeviceN instance and need not list all colorants. An entry with a key of Default shall specify a function to be used by all colorants for which a dot gain function is not explicitly specified. Conforming readers may ignore values in this dictionary when other sources of dot gain information are available, such as ICC profiles associated with the process colour space or tint transformation functions associated with individual colorants.>

block table-74-colour-operators
  block name
    brand <CS>
    brief <(PDF 1.1) Set the current colour space to use for stroking operations. The operand name shall be a name object. If the colour space is one that can be specified by a name and no additional parameters (DeviceGray, DeviceRGB, DeviceCMYK, and certain cases of Pattern), the name may be specified directly. Otherwise, it shall be a name defined in the ColorSpace subdictionary of the current resource dictionary (see 7.8.3, "Resource Dictionaries"); the associated value shall be an array describing the colour space (see 8.6.3, "Colour Space Families"). The names DeviceGray, DeviceRGB, DeviceCMYK, and Pattern always identify the corresponding colour spaces directly; they never refer to resources in the ColorSpace subdictionary. The CS operator shall also set the current stroking colour to its initial value, which depends on the colour space: In a DeviceGray, DeviceRGB, CalGray, or CalRGB colour space, the initial colour shall have all components equal to 0.0. In a DeviceCMYK colour space, the initial colour shall be [0.0 0.0 0.0 1.0]. In a Lab or ICCBased colour space, the initial colour shall have all components equal to 0.0 unless that falls outside the intervals specified by the space’s Range entry, in which case the nearest valid value shall be substituted. In an Indexed colour space, the initial colour value shall be 0. In a Separation or DeviceN colour space, the initial tint value shall be 1.0 for all colorants. In a Pattern colour space, the initial colour shall be a pattern object that causes nothing to be painted.>
  block name
    brand <cs>
    brief <(PDF 1.1) Same as CS but used for nonstroking operations.>
  block c1…cn
    brand <SC>
    brief <(PDF 1.1) Set the colour to use for stroking operations in a device, CIE- based (other than ICCBased), or Indexed colour space. The number of operands required and their interpretation depends on the current stroking colour space: For DeviceGray, CalGray, and Indexed colour spaces, one operand shall be required (n = 1). For DeviceRGB, CalRGB, and Lab colour spaces, three operands shall be required (n = 3). For DeviceCMYK, four operands shall be required (n = 4).>
  block c1…cn c1…cn name
    brand <SCN SCN>
    brief <(PDF 1.2) Same as SC but also supports Pattern, Separation, DeviceN and ICCBased colour spaces. If the current stroking colour space is a Separation, DeviceN, or ICCBased colour space, the operands c1…cn shall be numbers. The number of operands and their interpretation depends on the colour space. If the current stroking colour space is a Pattern colour space, name shall be the name of an entry in the Pattern subdictionary of the current resource dictionary (see 7.8.3, "Resource Dictionaries"). For an uncoloured tiling pattern (PatternType = 1 and PaintType = 2), c1…cn shall be component values specifying a colour in the pattern’s underlying colour space. For other types of patterns, these operands shall not be specified.>
  block c1…cn
    brand <sc>
    brief <(PDF 1.1) Same as SC but used for nonstroking operations.>
  block c1…cn c1…cn name
    brand <scn scn>
    brief <(PDF 1.2) Same as SCN but used for nonstroking operations.>
  block gray
    brand <G>
    brief <Set the stroking colour space to DeviceGray (or the DefaultGray colour space; see 8.6.5.6, "Default Colour Spaces") and set the gray level to use for stroking operations. gray shall be a number between 0.0 (black) and 1.0 (white).>
  block gray
    brand <g>
    brief <Same as G but used for nonstroking operations.>
  block r g b
    brand <RG>
    brief <Set the stroking colour space to DeviceRGB (or the DefaultRGB colour space; see 8.6.5.6, "Default Colour Spaces") and set the colour to use for stroking operations. Each operand shall be a number between 0.0 (minimum intensity) and 1.0 (maximum intensity).>
  block r g b
    brand <rg>
    brief <Same as RG but used for nonstroking operations.>
  block c m y k
    brand <K>
    brief <Set the stroking colour space to DeviceCMYK (or the DefaultCMYK colour space; see 8.6.5.6, "Default Colour Spaces") and set the colour to use for stroking operations. Each operand shall be a number between 0.0 (zero concentration) and 1.0 (maximum concentration). The behaviour of this operator is affected by the overprint mode (see 8.6.7, "Overprint Control").>
  block c m y k
    brand <k>
    brief <Same as K but used for nonstroking operations.>

block table-75-additional-entries-specific-to-a-type-1-pattern-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Pattern for a pattern dictionary.>
  state <PatternType>
    field integer
    force true
    value <A code identifying the type of pattern that this dictionary describes; shall be 1 for a tiling pattern.>
  state <PaintType>
    field integer
    force true
    value <A code that determines how the colour of the pattern cell shall be specified: a) Coloured tiling pattern. The pattern’s content stream shall specify the colours used to paint the pattern cell. When the content stream begins execution, the current colour is the one that was initially in effect in the pattern’s parent content stream. This is similar to the definition of the pattern matrix; see 8.7.2, "General Properties of Patterns". b) Uncoloured tiling pattern. The pattern’s content stream shall not specify any colour information. Instead, the entire pattern cell is painted with a separately specified colour each time the pattern is used. Essentially, the content stream describes a stencil through which the current colour shall be poured. The content stream shall not invoke operators that specify colours or other colour- related parameters in the graphics state; otherwise, an error occurs (see 8.6.8, "Colour Operators"). The content stream may paint an image mask, however, since it does not specify any colour information (see 8.9.6.2, "Stencil Masking").>
  state <TilingType>
    field integer
    force true
    value <A code that controls adjustments to the spacing of tiles relative to the device pixel grid: a) Constant spacing. Pattern cells shall be spaced consistently—that is, by a multiple of a device pixel. To achieve this, the conforming reader may need to distort the pattern cell slightly by making small adjustments to XStep, YStep, and the transformation matrix. The amount of distortion shall not exceed 1 device pixel. b) No distortion. The pattern cell shall not be distorted, but the spacing between pattern cells may vary by as much as 1 device pixel, both horizontally and vertically, when the pattern is painted. This achieves the spacing requested by XStep and YStep on average but not necessarily for each individual pattern cell. c) Constant spacing and faster tiling. Pattern cells shall be spaced consistently as in tiling type 1 but with additional distortion permitted to enable a more efficient implementation.>
  state <BBox>
    field rectangle
    force true
    value <An array of four numbers in the pattern coordinate system giving the coordinates of the left, bottom, right, and top edges, respectively, of the pattern cell’s bounding box. These boundaries shall be used to clip the pattern cell.>
  state <XStep>
    field number
    force true
    value <The desired horizontal spacing between pattern cells, measured in the pattern coordinate system.>
  state <YStep>
    field number
    force true
    value <The desired vertical spacing between pattern cells, measured in the pattern coordinate system. NOTE XStep and YStep may differ from the dimensions of the pattern cell implied by the BBox entry. This allows tiling with irregularly shaped figures. XStep and YStep may be either positive or negative but shall not be zero.>
  state <Resources>
    field dictionary
    force true
    value <A resource dictionary that shall contain all of the named resources required by the pattern’s content stream (see 7.8.3, "Resource Dictionaries").>
  state <Matrix>
    field array
    force false
    value <An array of six numbers specifying the pattern matrix (see 8.7.2, "General Properties of Patterns"). Default value: the identity matrix [1 0 0 1 0 0].>

block type-2-pattern-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Pattern for a pattern dictionary.>
  state <PatternType>
    field integer
    force true
    value <A code identifying the type of pattern that this dictionary describes; shall be 2 for a shading pattern.>
  state <Shading>
    field dictionary or stream
    force true
    value <A shading object (see below) defining the shading pattern’s gradient fill. The contents of the dictionary shall consist of the entries in Table 78 and those in one of Tables 79 to 84.>
  state <Matrix>
    field array
    force false
    value <An array of six numbers specifying the pattern matrix (see 8.7.2, "General Properties of Patterns"). Default value: the identity matrix [1 0 0 1 0 0].>
  state <ExtGState>
    field dictionary
    force false
    value <A graphics state parameter dictionary (see 8.4.5, "Graphics State Parameter Dictionaries") containing graphics state parameters to be put into effect temporarily while the shading pattern is painted. Any parameters that are so specified shall be inherited from the graphics state that was in effect at the beginning of the content stream in which the pattern is defined as a resource.>

block table-77-shading-operator
  block name
    brand <sh>
    brief <(PDF 1.3) Paint the shape and colour shading described by a shading dictionary, subject to the current clipping path. The current colour in the graphics state is neither used nor altered. The effect is different from that of painting a path using a shading pattern as the current colour. name is the name of a shading dictionary resource in the Shading subdictionary of the current resource dictionary (see 7.8.3, "Resource Dictionaries"). All coordinates in the shading dictionary are interpreted relative to the current user space. (By contrast, when a shading dictionary is used in a type 2 pattern, the coordinates are expressed in pattern space.) All colours are interpreted in the colour space identified by the shading dictionary’s ColorSpace entry (see Table 78). The Background entry, if present, is ignored. This operator should be applied only to bounded or geometrically defined shadings. If applied to an unbounded shading, it paints the shading’s gradient fill across the entire clipping region, which may be time-consuming.>

block table-78-entries-common-to-all-shading-dictionaries
  state <ShadingType>
    field integer
    force true
    value <The shading type: 1 Function-based shading 2 Axial shading 3 Radial shading 4 Free-form Gouraud-shaded triangle mesh 5 Lattice-form Gouraud-shaded triangle mesh 6 Coons patch mesh 7 Tensor-product patch mesh>
  state <ColorSpace>
    field name
    field array
    force true
    value <The colour space in which colour values shall be expressed. This may be any device, CIE-based, or special colour space except a Pattern space. See 8.7.4.4, "Colour Space: Special Considerations" for further information.>
  state <Background>
    field array
    force false
    value <An array of colour components appropriate to the colour space, specifying a single background colour value. If present, this colour shall be used, before any painting operation involving the shading, to fill those portions of the area to be painted that lie outside the bounds of the shading object. NOTE In the opaque imaging model, the effect is as if the painting operation were performed twice: first with the background colour and then with the shading. NOTE The background colour is applied only when the shading is used as part of a shading pattern, not when it is painted directly with the sh operator.>
  state <BBox>
    field rectangle
    force false
    value <An array of four numbers giving the left, bottom, right, and top coordinates, respectively, of the shading’s bounding box. The coordinates shall be interpreted in the shading’s target coordinate space. If present, this bounding box shall be applied as a temporary clipping boundary when the shading is painted, in addition to the current clipping path and any other clipping boundaries in effect at that time.>
  state <AntiAlias>
    field boolean
    force false
    value <A flag indicating whether to filter the shading function to prevent aliasing artifacts. NOTE The shading operators sample shading functions at a rate determined by the resolution of the output device. Aliasing can occur if the function is not smooth—that is, if it has a high spatial frequency relative to the sampling rate. Anti-aliasing can be computationally expensive and is usually unnecessary, since most shading functions are smooth enough or are sampled at a high enough frequency to avoid aliasing effects. Anti-aliasing may not be implemented on some output devices, in which case this flag is ignored. Default value: false.>

block table-79-additional-entries-specific-to-a-type-1-shading-dictionary
  state <Domain>
    field array
    force false
    value <An array of four numbers [xmin xmax ymin ymax ] specifying the rectangular domain of coordinates over which the colour function(s) are defined. Default value: [0.0 1.0 0.0 1.0].>
  state <Matrix>
    field array
    force false
    value <An array of six numbers specifying a transformation matrix mapping the coordinate space specified by the Domain entry into the shading’s target coordinate space. NOTE To map the domain rectangle [0.0 1.0 0.0 1.0] to a 1-inch square with lower-left corner at coordinates (100, 100) in default user space, the Matrix value would be [72 0 0 72 100 100]. Default value: the identity matrix [1 0 0 1 0 0].>
  state <Function>
    field function
    force true
    value <A 2-in, n-out function or an array of n 2-in, 1-out functions (where n is the number of colour components in the shading dictionary’s colour space). Each function’s domain shall be a superset of that of the shading dictionary. If the value returned by the function for a given colour component is out of range, it shall be adjusted to the nearest valid value.>

block table-80-additional-entries-specific-to-a-type-2-shading-dictionary
  state <Coords>
    field array
    force true
    value <An array of four numbers [x0 y0 x1 y1] specifying the starting and ending coordinates of the axis, expressed in the shading’s target coordinate space.>
  state <Domain>
    field array
    force false
    value <An array of two numbers [t0 t1 ] specifying the limiting values of a parametric variable t. The variable is considered to vary linearly between these two values as the colour gradient varies between the starting and ending points of the axis. The variable t becomes the input argument to the colour function(s). Default value: [0.0 1.0].>
  state <Function>
    field function
    force true
    value <A 1-in, n-out function or an array of n 1-in, 1-out functions (where n is the number of colour components in the shading dictionary’s colour space). The function(s) shall be called with values of the parametric variable t in the domain defined by the Domain entry. Each function’s domain shall be a superset of that of the shading dictionary. If the value returned by the function for a given colour component is out of range, it shall be adjusted to the nearest valid value.>
  state <Extend>
    field array
    force false
    value <An array of two boolean values specifying whether to extend the shading beyond the starting and ending points of the axis, respectively. Default value: [false false].>

block table-81-additional-entries-specific-to-a-type-3-shading-dictionary
  state <Coords>
    field array
    force true
    value <An array of six numbers [x0 y0 r0 x1 y1 r1 ] specifying the centres and radii of the starting and ending circles, expressed in the shading’s target coordinate space. The radii r0 and r1 shall both be greater than or equal to 0. If one radius is 0, the corresponding circle shall be treated as a point; if both are 0, nothing shall be painted.>
  state <Domain>
    field array
    force false
    value <An array of two numbers [t0 t1 ] specifying the limiting values of a parametric variable t. The variable is considered to vary linearly between these two values as the colour gradient varies between the starting and ending circles. The variable t becomes the input argument to the colour function(s). Default value: [ 0.0 1.0].>
  state <Function>
    field function
    force true
    value <A 1-in, n-out function or an array of n 1-in, 1-out functions (where n is the number of colour components in the shading dictionary’s colour space). The function(s) shall be called with values of the parametric variable t in the domain defined by the shading dictionary’s Domain entry. Each function’s domain shall be a superset of that of the shading dictionary. If the value returned by the function for a given colour component is out of range, it shall be adjusted to the nearest valid value.>
  state <Extend>
    field array
    force false
    value <An array of two boolean values specifying whether to extend the shading beyond the starting and ending circles, respectively. Default value: [false false].>

block table-82-additional-entries-specific-to-a-type-4-shading-dictionary
  state <BitsPerCoordinate>
    field integer
    force true
    value <The number of bits used to represent each vertex coordinate. The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.>
  state <BitsPerComponent>
    field integer
    force true
    value <The number of bits used to represent each colour component. The value shall be 1, 2, 4, 8, 12, or 16.>
  state <BitsPerFlag>
    field integer
    force true
    value <The number of bits used to represent the edge flag for each vertex (see below). The value of BitsPerFlag shall be 2, 4, or 8, but only the least significant 2 bits in each flag value shall be used. The value for the edge flag shall be 0, 1, or 2.>
  state <Decode>
    field array
    force true
    value <An array of numbers specifying how to map vertex coordinates and colour components into the appropriate ranges of values. The decoding method is similar to that used in image dictionaries (see 8.9.5.2, "Decode Arrays"). The ranges shall be specified as follows: [xmin xmax ymin ymax c1,min c1,max … cn,min cn,max ] Only one pair of c values shall be specified if a Function entry is present.>
  state <Function>
    field function
    force false
    value <A 1-in, n-out function or an array of n 1-in, 1-out functions (where n is the number of colour components in the shading dictionary’s colour space). If this entry is present, the colour data for each vertex shall be specified by a single parametric variable rather than by n separate colour components. The designated function(s) shall be called with each interpolated value of the parametric variable to determine the actual colour at each point. Each input value shall be forced into the range interval specified for the corresponding colour component in the shading dictionary’s Decode array. Each function’s domain shall be a superset of that interval. If the value returned by the function for a given colour component is out of range, it shall be adjusted to the nearest valid value. This entry shall not be used with an Indexed colour space.>

block table-83-additional-entries-specific-to-a-type-5-shading-dictionary
  state <BitsPerCoordinate>
    field integer
    force true
    value <The number of bits used to represent each vertex coordinate. The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.>
  state <BitsPerComponent>
    field integer
    force true
    value <The number of bits used to represent each colour component. The value shall be 1, 2, 4, 8, 12, or 16.>
  state <VerticesPerRow>
    field integer
    force true
    value <The number of vertices in each row of the lattice; the value shall be greater than or equal to 2. The number of rows need not be specified.>
  state <Decode>
    field array
    force true
    value <An array of numbers specifying how to map vertex coordinates and colour components into the appropriate ranges of values. The decoding method is similar to that used in image dictionaries (see 8.9.5.2, "Decode Arrays"). The ranges shall be specified as follows: [xmin xmax ymin ymax c1,min c1,max … cn,min cn,max ] Only one pair of c values shall be specified if a Function entry is present.>
  state <Function>
    field function
    force false
    value <A 1-in, n-out function or an array of n 1-in, 1-out functions (where n is the number of colour components in the shading dictionary’s colour space). If this entry is present, the colour data for each vertex shall be specified by a single parametric variable rather than by n separate colour components. The designated function(s) shall be called with each interpolated value of the parametric variable to determine the actual colour at each point. Each input value shall be forced into the range interval specified for the corresponding colour component in the shading dictionary’s Decode array. Each function’s domain shall be a superset of that interval. If the value returned by the function for a given colour component is out of range, it shall be adjusted to the nearest valid value. This entry shall not be used with an Indexed colour space.>

block table-84-additional-entries-specific-to-a-type-6-shading-dictionary
  state <BitsPerCoordinate>
    field integer
    force true
    value <The number of bits used to represent each geometric coordinate. The value shall be 1, 2, 4, 8, 12, 16, 24, or 32.>
  state <BitsPerComponent>
    field integer
    force true
    value <The number of bits used to represent each colour component. The value shall be 1, 2, 4, 8, 12, or 16.>
  state <BitsPerFlag>
    field integer
    force true
    value <The number of bits used to represent the edge flag for each patch (see below). The value shall be 2, 4, or 8, but only the least significant 2 bits in each flag value shall be used. Valid values for the edge flag shall be 0, 1, 2, and 3.>
  state <Decode>
    field array
    force true
    value <An array of numbers specifying how to map coordinates and colour components into the appropriate ranges of values. The decoding method is similar to that used in image dictionaries (see 8.9.5.2, "Decode Arrays"). The ranges shall be specified as follows: [xmin xmax ymin ymax c1,min c1,max … cn,min cn,max ] Only one pair of c values shall be specified if a Function entry is present.>
  state <Function>
    field function
    force false
    value <A 1-in, n-out function or an array of n 1-in, 1-out functions (where n is the number of colour components in the shading dictionary’s colour space). If this entry is present, the colour data for each vertex shall be specified by a single parametric variable rather than by n separate colour components. The designated function(s) shall be called with each interpolated value of the parametric variable to determine the actual colour at each point. Each input value shall be forced into the range interval specified for the corresponding colour component in the shading dictionary’s Decode array. Each function’s domain shall be a superset of that interval. If the value returned by the function for a given colour component is out of range, it shall be adjusted to the nearest valid value. This entry shall not be used with an Indexed colour space.>

block table-87-xobject-operator
  block name
    brand <Do>
    brief <Paint the specified XObject. The operand name shall appear as a key in the XObject subdictionary of the current resource dictionary (see 7.8.3, "Resource Dictionaries"). The associated value shall be a stream whose Type entry, if present, is XObject. The effect of Do depends on the value of the XObject’s Subtype entry, which may be Image (see 8.9.5, "Image Dictionaries"), Form (see 8.10, "Form XObjects"), or PS (see 8.8.2, "PostScript XObjects").>

block table-88-additional-entries-specific-to-a-postscript-xobject-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be XObject for a PostScript XObject.>
  state <Subtype>
    field name
    force true
    value <The type of XObject that this dictionary describes; shall be PS for a PostScript XObject. Alternatively, the value of this entry may be Form, with an additional Subtype2 entry whose value shall be PS.>
  state <Level1>
    field stream
    force false
    value <A stream whose contents shall be used in place of the PostScript XObject’s stream when the target PostScript interpreter is known to support only LanguageLevel 1.>

block table-89-additional-entries-specific-to-an-image-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be XObject for an image XObject.>
  state <Subtype>
    field name
    force true
    value <The type of XObject that this dictionary describes; shall be Image for an image XObject.>
  state <Width>
    field integer
    force true
    value <The width of the image, in samples.>
  state <Height>
    field integer
    force true
    value <The height of the image, in samples.>
  state <ColorSpace>
    field name
    field array
    force true
    value <The colour space in which image samples shall be specified; it can be any type of colour space except Pattern. If the image uses the JPXDecode filter, this entry may be present: • If ColorSpace is present, any colour space specifications in the JPEG2000 data shall be ignored. • If ColorSpace is absent, the colour space specifications in the JPEG2000 data shall be used. The Decode array shall also be ignored unless ImageMask is true.>
  state <BitsPerComponent>
    field integer
    force true
    value <The number of bits used to represent each colour component. Only a single value shall be specified; the number of bits shall be the same for all colour components. The value shall be 1, 2, 4, 8, or (in PDF 1.5) 16. If ImageMask is true, this entry is optional, but if specified, its value shall be 1. If the image stream uses a filter, the value of BitsPerComponent shall be consistent with the size of the data samples that the filter delivers. In particular, a CCITTFaxDecode or JBIG2Decode filter shall always deliver 1-bit samples, a RunLengthDecode or DCTDecode filter shall always deliver 8-bit samples, and an LZWDecode or FlateDecode filter shall deliver samples of a specified size if a predictor function is used. If the image stream uses the JPXDecode filter, this entry is optional and shall be ignored if present. The bit depth is determined by the conforming reader in the process of decoding the JPEG2000 image.>
  state <Intent>
    field name
    force false
    value <The name of a colour rendering intent to be used in rendering the image (see 8.6.5.8, "Rendering Intents"). Default value: the current rendering intent in the graphics state.>
  state <ImageMask>
    field boolean
    force false
    value <A flag indicating whether the image shall be treated as an image mask (see 8.9.6, "Masked Images"). If this flag is true, the value of BitsPerComponent shall be 1 and Mask and ColorSpace shall not be specified; unmasked areas shall be painted using the current nonstroking colour. Default value: false.>
  state <Mask>
    field stream
    field array
    force false
    value <An image XObject defining an image mask to be applied to this image (see 8.9.6.3, "Explicit Masking"), or an array specifying a range of colours to be applied to it as a colour key mask (see 8.9.6.4, "Colour Key Masking"). If ImageMask is true, this entry shall not be present.>
  state <Decode>
    field array
    force false
    value <An array of numbers describing how to map image samples into the range of values appropriate for the image’s colour space (see 8.9.5.2, "Decode Arrays"). If ImageMask is true, the array shall be either [0 1] or [1 0]; otherwise, its length shall be twice the number of colour components required by ColorSpace. If the image uses the JPXDecode filter and ImageMask is false, Decode shall be ignored by a conforming reader. Default value: see 8.9.5.2, "Decode Arrays".>
  state <Interpolate>
    field boolean
    force false
    value <A flag indicating whether image interpolation shall be performed by a conforming reader (see 8.9.5.3, "Image Interpolation"). Default value: false.>
  state <Alternates>
    field array
    force false
    value <An array of alternate image dictionaries for this image (see 8.9.5.4, "Alternate Images"). The order of elements within the array shall have no significance. This entry shall not be present in an image XObject that is itself an alternate image.>
  state <SMask>
    field stream
    force false
    value <A subsidiary image XObject defining a soft- mask image (see 11.6.5.3, "Soft-Mask Images") that shall be used as a source of mask shape or mask opacity values in the transparent imaging model. The alpha source parameter in the graphics state determines whether the mask values shall be interpreted as shape or opacity. If present, this entry shall override the current soft mask in the graphics state, as well as the image’s Mask entry, if any. However, the other transparency-related graphics state parameters—blend mode and alpha constant—shall remain in effect. If SMask is absent, the image shall have no associated soft mask (although the current soft mask in the graphics state may still apply).>
  state <SMaskInData>
    field integer
    force false
    value <A code specifying how soft-mask information (see 11.6.5.3, "Soft-Mask Images") encoded with image samples shall be used: 0 If present, encoded soft-mask image information shall be ignored. 1 The image’s data stream includes encoded soft-mask values. A conforming reader may create a soft-mask image from the information to be used as a source of mask shape or mask opacity in the transparency imaging model. 2 The image’s data stream includes colour channels that have been preblended with a background; the image data also includes an opacity channel. A conforming reader may create a soft-mask image with a Matte entry from the opacity channel information to be used as a source of mask shape or mask opacity in the transparency model. If this entry has a nonzero value, SMask shall not be specified. See also 7.4.9, "JPXDecode Filter". Default value: 0.>
  state <Name>
    field name
    force true
    value <The name by which this image XObject is referenced in the XObject subdictionary of the current resource dictionary (see 7.8.3, "Resource Dictionaries"). This entry is obsolescent and shall no longer be used.>
  state <StructParent>
    field integer
    force true
    value <The integer key of the image’s entry in the structural parent tree (see 14.7.4.4, "Finding Structure Elements from Content Items").>
  state <ID>
    field byte string
    force false
    value <The digital identifier of the image’s parent Web Capture content set (see 14.10.6, "Object Attributes Related to Web Capture").>
  state <OPI>
    field dictionary
    force false
    value <An OPI version dictionary for the image; see 14.11.7, "Open Prepress Interface (OPI)". If ImageMask is true, this entry shall be ignored.>
  state <Metadata>
    field stream
    force false
    value <A metadata stream containing metadata for the image (see 14.3.2, "Metadata Streams").>
  state <OC>
    field dictionary
    force false
    value <An optional content group or optional content membership dictionary (see 8.11, "Optional Content"), specifying the optional content properties for this image XObject. Before the image is processed by a conforming reader, its visibility shall be determined based on this entry. If it is determined to be invisible, the entire image shall be skipped, as if there were no Do operator to invoke it.>

block alternate-image-dictionary
  state <Image>
    field stream
    force true
    value <The image XObject for the alternate image.>
  state <DefaultForPrinting>
    field boolean
    force false
    value <A flag indicating whether this alternate image shall be the default version to be used for printing. At most one alternate for a given base image shall be so designated. If no alternate has this entry set to true, the base image shall be used for printing by a conforming reader.>
  state <OC>
    field dictionary
    force false
    value <An optional content group (see 8.11.2, "Optional Content Groups") or optional content membership dictionary (see 8.11.2.2, "Optional Content Membership Dictionaries") that facilitates the selection of which alternate image to use.>

block table-95-additional-entries-specific-to-a-type-1-form-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be XObject for a form XObject.>
  state <Subtype>
    field name
    force true
    value <The type of XObject that this dictionary describes; shall be Form for a form XObject.>
  state <FormType>
    field integer
    force false
    value <A code identifying the type of form XObject that this dictionary describes. The only valid value is 1. Default value: 1.>
  state <BBox>
    field rectangle
    force true
    value <An array of four numbers in the form coordinate system (see above), giving the coordinates of the left, bottom, right, and top edges, respectively, of the form XObject’s bounding box. These boundaries shall be used to clip the form XObject and to determine its size for caching.>
  state <Matrix>
    field array
    force false
    value <An array of six numbers specifying the form matrix, which maps form space into user space (see 8.3.4, "Transformation Matrices"). Default value: the identity matrix [ 1 0 0 1 0 0].>
  state <Resources>
    field dictionary
    force false
    value <A dictionary specifying any resources (such as fonts and images) required by the form XObject (see 7.8, "Content Streams and Resources"). In a PDF whose version is 1.1 and earlier, all named resources used in the form XObject shall be included in the resource dictionary of each page object on which the form XObject appears, regardless of whether they also appear in the resource dictionary of the form XObject. These resources should also be specified in the form XObject’s resource dictionary as well, to determine which resources are used inside the form XObject. If a resource is included in both dictionaries, it shall have the same name in both locations. In PDF 1.2 and later versions, form XObjects may be independent of the content streams in which they appear, and this is strongly recommended although not required. In an independent form XObject, the resource dictionary of the form XObject is required and shall contain all named resources used by the form XObject. These resources shall not be promoted to the outer content stream’s resource dictionary, although that stream’s resource dictionary refers to the form XObject.>
  state <Group>
    field dictionary
    force false
    value <A group attributes dictionary indicating that the contents of the form XObject shall be treated as a group and specifying the attributes of that group (see 8.10.3, "Group XObjects"). If a Ref entry (see below) is present, the group attributes shall also apply to the external page imported by that entry, which allows such an imported page to be treated as a group without further modification.>
  state <Ref>
    field dictionary
    force false
    value <A reference dictionary identifying a page to be imported from another PDF file, and for which the form XObject serves as a proxy (see 8.10.4, "Reference XObjects").>
  state <Metadata>
    field stream
    force false
    value <A metadata stream containing metadata for the form XObject (see 14.3.2, "Metadata Streams").>
  state <PieceInfo>
    field dictionary
    force false
    value <A page-piece dictionary associated with the form XObject (see 14.5, "Page-Piece Dictionaries").>
  state <LastModified>
    field date
    force true
    value <(ReThe date and time (see 7.9.4, "Dates") when the form XObject’s contents were most recently modified. If a page-piece dictionary (PieceInfo) is present, the modification date shall be used to ascertain which of the application data dictionaries it contains correspond to the current content of the form (see 14.5, "Page-Piece Dictionaries").>
  state <StructParent>
    field integer
    force true
    value <The integer key of the form XObject’s entry in the structural parent tree (see 14.7.4.4, "Finding Structure Elements from Content Items").>
  state <StructParents>
    field integer
    force true
    value <The integer key of the form XObject’s entry in the structural parent tree (see 14.7.4.4, "Finding Structure Elements from Content Items"). At most one of the entries StructParent or StructParents shall be present. A form XObject shall be either a content item in its entirety or a container for marked-content sequences that are content items, but not both.>
  state <OPI>
    field dictionary
    force false
    value <An OPI version dictionary for the form XObject (see 14.11.7, "Open Prepress Interface (OPI)").>
  state <OC>
    field dictionary
    force false
    value <An optional content group or optional content membership dictionary (see 8.11, "Optional Content") specifying the optional content properties for the form XObject. Before the form is processed, its visibility shall be determined based on this entry. If it is determined to be invisible, the entire form shall be skipped, as if there were no Do operator to invoke it.>
  state <Name>
    field name
    force true
    value <The name by which this form XObject is referenced in the XObject subdictionary of the current resource dictionary (see 7.8.3, "Resource Dictionaries"). NOTE This entry is obsolescent and its use is no longer recommended.>

block table-96-entries-common-to-all-group-attributes-dictionaries
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Group for a group attributes dictionary.>
  state <S>
    field name
    force true
    value <The group subtype, which identifies the type of group whose attributes this dictionary describes and determines the format and meaning of the dictionary’s remaining entries. The only group subtype defined is Transparency; see 11.6.6, "Transparency Group XObjects", for the remaining contents of this type of dictionary.>

block reference-dictionary
  state <F>
    field file-specification
    force true
    value <The file containing the target document.>
  state <Page>
    field integer or text string
    force true
    value <A page index or page label (see 12.4.2, "Page Labels") identifying the page of the target document containing the content to be imported. This reference is a weak one and may be inadvertently invalidated if the referenced page is changed or replaced in the target document after the reference is created.>
  state <ID>
    field array
    force false
    value <An array of two byte strings constituting a file identifier (see 14.4, "File Identifiers") for the file containing the target document. The use of this entry improves an reader’s chances of finding the intended file and allows it to warn the user if the file has changed since the reference was created.>

block optional-content-group-dictionary
  state <Type>
    field name
    force true
    value <The type of PDF object that this dictionary describes; shall be OCG for an optional content group dictionary.>
  state <Name>
    field text
    force true
    value <The name of the optional content group, suitable for-presentation-in-a-reader’s user interface.>
  state <Intent>
    field name
    field array
    force false
    value <A single intent name or an array containing any combination of names. PDF defines two names, View and Design, that may indicate the intended use of the graphics in the group. A conforming reader may choose to use only groups that have a specific intent and ignore others. Default value: View. See 8.11.2.3, "Intent" for more information.>
  state <Usage>
    field dictionary
    force false
    value <A usage dictionary describing the nature of the content controlled by the group. It may be used by features that automatically control the state of the group based on outside factors. See 8.11.4.4, "Usage and Usage Application Dictionaries" for more information.>

block optional-content-membership-dictionary
  state <Type>
    field name
    force true
    value <The type of PDF object that this dictionary describes; shall be OCMD for an optional content membership dictionary.>
  state <OCGs>
    field dictionary
    field array
    force false
    value <A dictionary or array of dictionaries specifying the optional content groups whose states shall determine the visibility of content controlled by this membership dictionary. Null values or references to deleted objects shall be ignored. If this entry is not present, is an empty array, or contains references only to null or deleted objects, the membership dictionary shall have no effect on the visibility of any content.>
  state <P>
    field name
    force false
    value <A name specifying the visibility policy for content belonging to this membership dictionary. Valid values shall be: AllOn visible only if all of the entries in OCGs are ON AnyOn visible if any of the entries in OCGs are ON AnyOff visible if any of the entries in OCGs are OFF AllOff visible only if all of the entries in OCGs are OFF Default value: AnyOn>
  state <VE>
    field array
    force false
    value <An array specifying a visibility expression, used to compute visibility of content based on a set of optional content groups; see discussion below.>

block optional-content-properties-dictionary
  state <OCGs>
    field array
    force true
    value <An array of indirect references to all the optional content groups in the document (see 8.11.2, "Optional Content Groups"), in any order. Every optional content group shall be included in this array.>
  state <D>
    field dictionary
    force true
    value <The default viewing optional content configuration dictionary (see 8.11.4.3, "Optional Content Configuration Dictionaries").>
  state <Configs>
    field array
    force false
    value <An array of alternate optional content configuration dictionaries (see 8.11.4.3, "Optional Content Configuration Dictionaries").>

block optional-content-configuration-dictionary
  state <Name>
    field text
    force false
    value <A name for the configuration, suitable for-presentation-in-a-user-interface.>
  state <Creator>
    field text
    force false
    value <Name of the application or feature that created this configuration dictionary.>
  state <BaseState>
    field name
    force false
    value <Used to initialize the states of all the optional content groups in a document when this configuration is applied. The value of this entry shall be one of the following names: ON The states of all groups shall be turned ON. OFF The states of all groups shall be turned OFF. Unchanged The states of all groups shall be left unchanged. After this initialization, the contents of the ON and OFF arrays shall be processed, overriding the state of the groups included in the arrays. Default value: ON. If BaseState is present in the document’s default configuration dictionary, its value shall be ON.>
  state <ON>
    field array
    force false
    value <An array of optional content groups whose state shall be set to ON when this configuration is applied. If the BaseState entry is ON, this entry is redundant.>
  state <OFF>
    field array
    force false
    value <An array of optional content groups whose state shall be set to OFF when this configuration is applied. If the BaseState entry is OFF, this entry is redundant.>
  state <Intent>
    field name
    field array
    force false
    value <A single intent name or an array containing any combination of names. it shall be used to determine which optional content groups’ states to consider and which to ignore in calculating the visibility of content (see 8.11.2.3, "Intent"). PDF defines two intent names, View and Design. In addition, the name All shall indicate the set of all intents, including those not yet defined. Default value: View. The value shall be View for the document’s default configuration.>
  state <AS>
    field array
    force false
    value <An array of usage application dictionaries (see Table 103) specifying which usage dictionary categories (see Table 102) shall be consulted by conforming readers to automatically set the states of optional content groups based on external factors, such as the current system language or viewing magnification, and when they shall be applied.>
  state <Order>
    field array
    force false
    value <An array specifying the order for presentation of optional content groups in a conforming reader’s user interface. The array elements may include the following objects: Optional content group dictionaries, whose Name entry shall be displayed in the user interface by the conforming reader. Arrays of optional content groups which may be displayed by a conforming reader in a tree or outline structure. Each nested array may optionally have as its first element a text string to be used as a non-selectable label-in-a-conforming-reader’s user interface. Text labels in nested arrays shall be used to present collections of related optional content groups, and not to communicate actual nesting of content inside multiple layers of groups (see EXAMPLE 1 in 8.11.4.3, "Optional Content Configuration Dictionaries"). To reflect actual nesting of groups in the content, such as for layers with sublayers, nested arrays of groups without a text label shall be used (see EXAMPLE 2 in 8.11.4.3, "Optional Content Configuration Dictionaries"). An empty array [] explicitly specifies that no groups shall be presented. In the default configuration dictionary, the default value shall be an empty array; in other configuration dictionaries, the default shall be the Order value from the default configuration dictionary. Any groups not listed in this array shall not be presented in any user interface that uses the configuration.>
  state <ListMode>
    field name
    force false
    value <A name specifying which optional content groups in the Order array shall be displayed to the user. Valid values shall be: AllPages Display all groups in the Order array. VisiblePages Display only those groups in the Order array that are referenced by one or more visible pages. Default value: AllPages.>
  state <RBGroups>
    field array
    force false
    value <An array consisting of one or more arrays, each of which represents a collection of optional content groups whose states shall be intended to follow a radio button paradigm. That is, the state of at most one optional content group in each array shall be ON at a time. If one group is turned ON, all others shall be turned OFF. However, turning a group from ON to OFF does not force any other group to be turned ON. An empty array [] explicitly indicates that no such collections exist. In the default configuration dictionary, the default value shall be an empty array; in other configuration dictionaries, the default is the RBGroups value from the default configuration dictionary.>
  state <Locked>
    field array
    force false
    value <An array of optional content groups that shall be locked when this configuration is applied. The state of a locked group cannot be changed through the user interface of a conforming reader. Conforming writers can use this entry to prevent the visibility of content that depends on these groups from being changed by users. Default value: an empty array. A conforming reader may allow the states of optional content groups from being changed by means other than the user interface, such as JavaScript or items in the AS entry of a configuration dictionary.>

block optional-content-usage-dictionary
  state <CreatorInfo>
    field dictionary
    force false
    value <A dictionary used by the creating application to store application-specific data associated with this optional content group. It shall contain two required entries: Creator A text string specifying the application that created the group. Subtype A name defining the type of content controlled by the group. Suggested values include but shall not be limited to Artwork, for graphic-design or publishing applications, and Technical, for technical designs such as building plans or schematics. Additional entries may be included to present information relevant to the creating application or related applications. Groups whose Intent entry contains Design typically include a CreatorInfo entry.>
  state <Language>
    field dictionary
    force false
    value <A dictionary specifying the language of the content controlled by this optional content group. It may contain the following two entries: Lang (required) A text string that specifies a language and possibly a locale (see 14.9.2, "Natural Language Specification"). For example, es-MX represents Mexican Spanish. Preferred A name whose values shall be either ON or OFF. Default value: OFF. it shall be used by conforming readers when there is a partial match but no exact match between the system language and the language strings in all usage dictionaries. See 8.11.4.4, "Usage and Usage Application Dictionaries" for more information.>
  state <Export>
    field dictionary
    force false
    value <A dictionary containing one entry, ExportState, a name whose value shall be either ON or OFF. This value shall indicate the recommended state for content in this group when the document (or part of it) is saved by a conforming reader to a format that does not support optional content (for example, a raster image format).>
  state <Zoom>
    field dictionary
    force false
    value <A dictionary specifying a range of magnifications at which the content in this optional content group is best viewed. It shall contain one or both of the following entries: min The minimum recommended magnification factor at which the group shall be ON. Default value: 0. max The magnification factor below which the group shall be ON. Default value: infinity.>
  state <Print>
    field dictionary
    force false
    value <A dictionary specifying that the content in this group is shall be used when printing. It may contain the following optional entries: Subtype A name object specifying the kind of content controlled by the group; for example, Trapping, PrintersMarks and Watermark. PrintState A name that shall be either ON or OFF, indicating that the group shall be set to that state when the document is printed from a conforming reader.>
  state <View>
    field dictionary
    force false
    value <A dictionary that shall have a single entry, ViewState, a name that shall have a value of either ON or OFF, indicating that the group shall be set to that state when the document is opened in a conforming reader.>
  state <User>
    field dictionary
    force false
    value <A dictionary specifying one or more users for whom this optional content group is primarily intended. Each dictionary shall have two required entries: Type A name object that shall be either Ind (individual), Ttl (title), or Org (organization). Name A text string or array of text strings representing the name(s) of the individual, position or organization.>
  state <PageElement>
    field dictionary
    force false
    value <A dictionary declaring that the group contains a pagination artifact. It shall contain one entry, Subtype, whose value shall be a name that is either HF (header/footer), FG (foreground image or graphic), BG (background image or graphic), or L (logo).>

block usage-application-dictionary
  state <Event>
    field name
    force true
    value <A name defining the situation in which this usage application dictionary should be used. Shall be one of View, Print, or Export.>
  state <OCGs>
    field array
    force false
    value <An array listing the optional content groups that shall have their states automatically managed based on information in their usage dictionary (see 8.11.4.4, "Usage and Usage Application Dictionaries"). Default value: an empty array, indicating that no groups shall be affected.>
  state <Category>
    field array
    force true
    value <An array of names, each of which corresponds to a usage dictionary entry (see Table 102). When managing the states of the optional content groups in the OCGs array, each of the corresponding categories in the group’s usage dictionary shall be considered.>

block table-104-text-state-parameters
  Parameter Tc
    brief <Character spacing>
  Parameter Tw
    brief <Word spacing>
  Parameter Th
    brief <Horizontal scaling>
  Parameter Tl
    brief <Leading>
  Parameter Tf
    brief <Text font>
  Parameter Tfs
    brief <Text font size>
  Parameter Tmode
    brief <Text rendering mode>
  Parameter Trise
    brief <Text rise>
  Parameter Tk
    brief <Text knockout>

block table-105-text-state-operators
  block charSpace
    brand <Tc>
    brief <Set the character spacing, Tc , to charSpace, which shall be a number expressed in unscaled text space units. Character spacing shall be used by the Tj, TJ, and ' operators. Initial value: 0.>
  block wordSpace
    brand <Tw>
    brief <Set the word spacing, Tw, to wordSpace, which shall be a number expressed in unscaled text space units. Word spacing shall be used by the Tj, TJ, and ' operators. Initial value: 0.>
  block scale
    brand <Tz>
    brief <Set the horizontal scaling, Th , to (scale ÷ 100). scale shall be a number specifying the percentage of the normal width. Initial value: 100 (normal width).>
  block leading
    brand <TL>
    brief <Set the text leading, Tl , to leading, which shall be a number expressed in unscaled text space units. Text leading shall be used only by the T*, ', and " operators. Initial value: 0.>
  block font size
    brand <Tf>
    brief <Set the text font, Tf , to font and the text font size, Tfs , to size. font shall be the name of a font resource in the Font subdictionary of the current resource dictionary; size shall be a number representing a scale factor. There is no initial value for either font or size; they shall be specified explicitly by using Tf before any text is shown.>
  block render
    brand <Tr>
    brief <Set the text rendering mode, Tmode , to render, which shall be an integer. Initial value: 0.>
  block rise
    brand <Ts>
    brief <Set the text rise, Trise , to rise, which shall be a number expressed in unscaled text space units. Initial value: 0.>

block table-107-text-object-operators
  block —
    brand <BT>
    brief <Begin a text object, initializing the text matrix, Tm , and the text line matrix, Tlm , to the identity matrix. Text objects shall not be nested; a second BT shall not appear before an ET.>
  block —
    brand <ET>
    brief <End a text object, discarding the text matrix.>

block table-108-text-positioning-operators
  block tx ty
    brand <Td>
    brief <Move to the start of the next line, offset from the start of the current line by (tx , ty ). tx and ty shall denote numbers expressed in unscaled text space units. More precisely, this operator shall perform these assignments: 1 0 0 Tm = Tlm = 0 1 0 × Tlm tx ty 1>
  block tx ty
    brand <TD>
    brief <Move to the start of the next line, offset from the start of the current line by (tx , ty). As a side effect, this operator shall set the leading parameter in the text state. This operator shall have the same effect as this code: −ty TL tx ty Td>
  block a b c d e f
    brand <Tm>
    brief <Set the text matrix, Tm , and the text line matrix, Tlm : a b 0 Tm = Tlm = c d 0 e f 1 The operands shall all be numbers, and the initial value for Tm and Tlm shall be the identity matrix, [ 1 0 0 1 0 0]. Although the operands specify a matrix, they shall be passed to Tm as six separate numbers, not as an array. The matrix specified by the operands shall not be concatenated onto the current text matrix, but shall replace it.>
  block —
    brand <T*>
    brief <Move to the start of the next line. This operator has the same effect as the code 0 -Tl Td where Tl denotes the current leading parameter in the text state. The negative of Tl is used here because Tl is the text leading expressed as a positive number. Going to the next line entails decreasing the y coordinate.>

block table-109-text-showing-operators
  block string
    brand <Tj>
    brief <Show a text string.>
  block string
    brand <'>
    brief <Move to the next line and show a text string. This operator shall have the same effect as the code T* string Tj>
  block aw ac string
    brand <">
    brief <Move to the next line and show a text string, using aw as the word spacing and ac as the character spacing (setting the corresponding parameters in the text state). aw and ac shall be numbers expressed in unscaled text space units. This operator shall have the same effect as this code: aw Tw ac Tc string '>
  block array
    brand <TJ>
    brief <Show one or more text strings, allowing individual glyph positioning. Each element of array shall be either a string or a number. If the element is a string, this operator shall show the string. If it is a number, the operator shall adjust the text position by that amount; that is, it shall translate the text matrix, Tm . The number shall be expressed in thousandths of a unit of text space (see 9.4.4, "Text Space Details"). This amount shall be subtracted from the current horizontal or vertical coordinate, depending on the writing mode. In the default coordinate system, a positive adjustment has the effect of moving the next glyph painted either to the left or down by the given amount. Figure 46 shows an example of the effect of passing offsets to TJ.>

block table-110-font-types
  type Type 0
    Subtype Value Type0
    brief <(PDF 1.2) A composite font—a font composed of glyphs from a descendant CIDFont (see 9.7, "Composite Fonts")>
  type Type 1
    Subtype Value Type1
    brief <A font that defines glyph shapes using Type 1 font technology (see 9.6.2, "Type 1 Fonts").>
  type MMType1
    Subtype Value A multiple master font—an extension of the Type 1 font that allows the generation of a wide variety of typeface styles from a single font (see 9.6.2.3, "Multiple Master Fonts")
    brief
  type Type 3
    Subtype Value Type3
    brief <A font that defines glyphs with streams of PDF graphics operators (see 9.6.5, "Type 3 Fonts")>
  type TrueType
    Subtype Value TrueType
    brief <A font based on the TrueType font format (see 9.6.3, "TrueType Fonts")>
  type CIDFont
    Subtype Value CIDFontType0
    brief <(PDF 1.2) A CIDFont whose glyph descriptions are based on Type 1 font technology (see 9.7.4, "CIDFonts")>
  type CIDFontType2
    Subtype Value (PDF 1.2) A CIDFont whose glyph descriptions are based on TrueType font technology (see 9.7.4, "CIDFonts")
    brief

block type-1-font-dictionary
  state <Type>
    field name
    force true
    value <The type of PDF object that this dictionary describes; shall be Font for a font dictionary.>
  state <Subtype>
    field name
    force true
    value <The type of font; shall be Type1 for a Type 1 font.>
  state <Name>
    field name
    force true
    value <The name by which this font is referenced in the Font subdictionary of the current resource dictionary. This entry is obsolete and should not be used.>
  state <BaseFont>
    field name
    force true
    value <The PostScript name of the font. For Type 1 fonts, this is always the value of the FontName entry in the font program; for more information, see Section 5.2 of the PostScript Language Reference, Third Edition. The PostScript name of the font may be used to find the font program in the conforming reader or its environment. It is also the name that is used when printing to a PostScript output device.>
  state <FirstChar>
    field integer
    force true
    value <The first character code defined in the font’s Widths array. Beginning with PDF 1.5, the special treatment given to the standard 14 fonts is deprecated. Conforming writers should represent all fonts using a complete font descriptor. For backwards capability, conforming readers shall still provide the special treatment identified for the standard 14 fonts.>
  state <LastChar>
    field integer
    force true
    value <The last character code defined in the font’s Widths array. Beginning with PDF 1.5, the special treatment given to the standard 14 fonts is deprecated. Conforming writers should represent all fonts using a complete font descriptor. For backwards capability, conforming readers shall still provide the special treatment identified for the standard 14 fonts.>
  state <Widths>
    field array
    force true
    value <An array of (LastChar − FirstChar + 1) widths, each element being the glyph width for the character code that equals FirstChar plus the array index. For character codes outside the range FirstChar to LastChar, the value of MissingWidth from the FontDescriptor entry for this font shall be used. The glyph widths shall be measured in units in which 1000 units correspond to 1 unit in text space. These widths shall be consistent with the actual widths given in the font program. For more information on glyph widths and other glyph metrics, see 9.2.4, "Glyph Positioning and Metrics". Beginning with PDF 1.5, the special treatment given to the standard 14 fonts is deprecated. Conforming writers should represent all fonts using a complete font descriptor. For backwards capability, conforming readers shall still provide the special treatment identified for the standard 14 fonts.>
  state <FontDescriptor>
    field dictionary
    force true
    value <A font descriptor describing the font’s metrics other than its glyph widths (see 9.8, "Font Descriptors"”\). For the standard 14 fonts, the entries FirstChar, LastChar, Widths, and FontDescriptor shall either all be present or all be absent. Ordinarily, these dictionary keys may be absent; specifying them enables a standard font to be overridden; see 9.6.2.2, "Standard Type 1 Fonts (Standard 14 Fonts)". Beginning with PDF 1.5, the special treatment given to the standard 14 fonts is deprecated. Conforming writers should represent all fonts using a complete font descriptor. For backwards capability, conforming readers shall still provide the special treatment identified for the standard 14 fonts.>
  state <Encoding>
    field name
    field dictionary
    force false
    value <A specification of the font’s character encoding if different from its built-in encoding. The value of Encoding shall be either the name of a predefined encoding (MacRomanEncoding, MacExpertEncoding, or WinAnsiEncoding, as described in Annex D) or an encoding dictionary that shall specify differences from the font’s built-in encoding or from a specified predefined encoding (see 9.6.6, "Character Encoding").>
  state <ToUnicode>
    field stream
    force false
    value <A stream containing a CMap file that maps character codes to Unicode values (see 9.10, "Extraction of Text Content").>

block type-3-font-dictionary
  state <Type>
    field name
    force true
    value <The type of PDF object that this dictionary describes; shall be Font for a font dictionary.>
  state <Subtype>
    field name
    force true
    value < The type of font; shall be Type3 for a Type 3 font.>
  state <Name>
    field name
    force true
    value <See Table 111.>
  state <FontBBox>
    field rectangle
    force true
    value <A rectangle (see 7.9.5, "Rectangles") expressed in the glyph coordinate system, specifying the font bounding box. This is the smallest rectangle enclosing the shape that would result if all of the glyphs of the font were placed with their origins coincident and then filled. If all four elements of the rectangle are zero, a conforming reader shall make no assumptions about glyph sizes based on the font bounding box. If any element is nonzero, the font bounding box shall be accurate. If any glyph’s marks fall outside this bounding box, incorrect behavior may result.>
  state <FontMatrix>
    field array
    force true
    value <An array of six numbers specifying the font matrix, mapping glyph space to text space (see 9.2.4, "Glyph Positioning and Metrics"). NOTE A common practice is to define glyphs in terms of a 1000-unit glyph coordinate system, in which case the font matrix is [ 0.001 0 0 0.001 0 0].>
  state <CharProcs>
    field dictionary
    force true
    value < A dictionary in which each key shall be a glyph name and the value associated with that key shall be a content stream that constructs and paints the glyph for that character. The stream shall include as its first operator either d0 or d1, followed by operators describing one or more graphics objects, which may include path, text, or image objects. See below for more details about Type 3 glyph descriptions.>
  state <Encoding>
    field name
    field dictionary
    force true
    value <An encoding dictionary whose Differences array shall specify the complete character encoding for this font (see 9.6.6, "Character Encoding").>
  state <FirstChar>
    field integer
    force true
    value <The first character code defined in the font’s Widths array.>
  state <LastChar>
    field integer
    force true
    value <The last character code defined in the font’s Widths array.>
  state <Widths>
    field array
    force true
    value < An array of (LastChar − FirstChar + 1) widths, each element being the glyph width for the character code that equals FirstChar plus the array index. For character codes outside the range FirstChar to LastChar, the width shall be 0. These widths shall be interpreted in glyph space as specified by FontMatrix (unlike the widths of a Type 1 font, which are in thousandths of a unit of text space). If FontMatrix specifies a rotation, only the horizontal component of the transformed width shall be used. That is, the resulting displacement shall be horizontal in text space, as is the case for all simple fonts.>
  state <FontDescriptor>
    field dictionary
    force true
    value < A font descriptor describing the font’s default metrics other than its glyph widths (see 9.8, "Font Descriptors").>
  state <Resources>
    field dictionary
    force false
    value <A list of the named resources, such as fonts and images, required by the glyph descriptions in this font (see 7.8.3, "Resource Dictionaries"). If any glyph descriptions refer to named resources but this dictionary is absent, the names shall be looked up in the resource dictionary of the page on which the font is used.>
  state <ToUnicode>
    field stream
    force false
    value <A stream containing a CMap file that maps character codes to Unicode values (see 9.10, "Extraction of Text Content").>

block table-113-type-3-font-operators
  block wx wy
    brand <d0>
    brief <Set width information for the glyph and declare that the glyph description specifies both its shape and its colour. NOTE This operator name ends in the digit 0. wx denotes the horizontal displacement in the glyph coordinate system; it shall be consistent with the corresponding width in the font’s Widths array. wy shall be 0 (see 9.2.4, "Glyph Positioning and Metrics"). This operator shall only be permitted in a content stream appearing in a Type 3 font’s CharProcs dictionary. It is typically used only if the glyph description executes operators to set the colour explicitly.>
  block wx wy llx lly urx ury
    brand <d1>
    brief <Set width and bounding box information for the glyph and declare that the glyph description specifies only shape, not colour. NOTE This operator name ends in the digit 1. wx denotes the horizontal displacement in the glyph coordinate system; it shall be consistent with the corresponding width in the font’s Widths array. wy shall be 0 (see 9.2.4, "Glyph Positioning and Metrics"). llx and lly denote the coordinates of the lower-left corner, and urx and ury denote the upper-right corner, of the glyph bounding box. The glyph bounding box is the smallest rectangle, oriented with the axes of the glyph coordinate system, that completely encloses all marks placed on the page as a result of executing the glyph’s description. The declared bounding box shall be correct—in other words, sufficiently large to enclose the entire glyph. If any marks fall outside this bounding box, the result is unpredictable. A glyph description that begins with the d1 operator should not execute any operators that set the colour (or other colour-related parameters) in the graphics state; any use of such operators shall be ignored. The glyph description is executed solely to determine the glyph’s shape. Its colour shall be determined by the graphics state in effect each time this glyph is painted by a text-showing operator. For the same reason, the glyph description shall not include an image; however, an image mask is acceptable, since it merely defines a region of the page to be painted with the current colour. This operator shall be used only in a content stream appearing in a Type 3 font’s CharProcs dictionary.>

block encoding-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Encoding for an encoding dictionary.>
  state <BaseEncoding>
    field name
    force false
    value <The base encoding—that is, the encoding from which the Differences entry (if present) describes differences— shall be the name of one of the predefined encodings MacRomanEncoding, MacExpertEncoding, or WinAnsiEncoding (see Annex D). If this entry is absent, the Differences entry shall describe differences from an implicit base encoding. For a font program that is embedded in the PDF file, the implicit base encoding shall be the font program’s built-in encoding, as described in 9.6.6, "Character Encoding" and further elaborated in the sub-clauses on specific font types. Otherwise, for a nonsymbolic font, it shall be StandardEncoding, and for a symbolic font, it shall be the font’s built-in encoding.>
  state <Differences>
    field array
    force false
    value <An array describing the differences from the encoding specified by BaseEncoding or, if BaseEncoding is absent, from an implicit base encoding. The Differences array is described in subsequent sub-clauses.>

block cidsysteminfo-dictionary
  state <Registry>
    field ascii-string
    force true
    value <A string identifying the issuer of the character collection. For information about assigning a registry identifier, contact the Adobe Solutions Network or consult the ASN Web site (see the Bibliography).>
  state <Ordering>
    field ascii-string
    force true
    value < A string that uniquely names the character collection within the specified registry.>
  state <Supplement>
    field integer
    force true
    value <The supplement number of the character collection. An original character collection has a supplement number of 0. Whenever additional CIDs are assigned in a character collection, the supplement number shall be increased. Supplements shall not alter the ordering of existing CIDs in the character collection. This value shall not be used in determining compatibility between character collections.>

block table-120-additional-entries-in-a-cmap-stream-dictionary
  state <Type>
    field name
    force true
    value < The type of PDF object that this dictionary describes; shall be CMap for a CMap dictionary.>
  state <CMapName>
    field name
    force true
    value <The name of the CMap. It shall be the same as the value of CMapName in the CMap file.>
  state <CIDSystemInfo>
    field dictionary
    force true
    value <A dictionary (see 9.7.3, "CIDSystemInfo Dictionaries") containing entries that define the character collection for the CIDFont or CIDFonts associated with the CMap. The value of this entry shall be the same as the value of CIDSystemInfo in the CMap file. (However, it does not need to match the values of CIDSystemInfo for the Identity-H or Identity-V CMaps.)>
  state <WMode>
    field integer
    force false
    value <A code that specifies the writing mode for any CIDFont with which this CMap is combined. The value shall be 0 for horizontal or 1 for vertical. Default value: 0. The value of this entry shall be the same as the value of WMode in the CMap file.>
  state <UseCMap>
    field name
    field stream
    force false
    value < The name of a predefined CMap, or a stream containing a CMap. If this entry is present, the referencing CMap shall specify only the character mappings that differ from the referenced CMap.>

block type-0-font-dictionary
  state <Type>
    field name
    force true
    value <The type of PDF object that this dictionary describes; shall be Font for a font dictionary.>
  state <Subtype>
    field name
    force true
    value <The type of font; shall be Type0 for a Type 0 font.>
  state <BaseFont>
    field name
    force true
    value <The name of the font. If the descendant is a Type 0 CIDFont, this name should be the concatenation of the CIDFont’s BaseFont name, a hyphen, and the CMap name given in the Encoding entry (or the CMapName entry in the CMap). If the descendant is a Type 2 CIDFont, this name should be the same as the CIDFont’s BaseFont name. NOTE In principle, this is an arbitrary name, since there is no font program associated directly with a Type 0 font dictionary. The conventions described here ensure maximum compatibility with existing readers.>
  state <Encoding>
    field name
    field stream
    force true
    value <The name of a predefined CMap, or a stream containing a CMap that maps character codes to font numbers and CIDs. If the descendant is a Type 2 CIDFont whose associated TrueType font program is not embedded in the PDF file, the Encoding entry shall be a predefined CMap name (see 9.7.4.2, "Glyph Selection in CIDFonts").>
  state <DescendantFonts>
    field array
    force true
    value <A one-element array specifying the CIDFont dictionary that is the descendant of this Type 0 font.>
  state <ToUnicode>
    field stream
    force false
    value <A stream containing a CMap file that maps character codes to Unicode values (see 9.10, "Extraction of Text Content").>

block table-122-entries-common-to-all-font-descriptors
  state <Type>
    field name
    force true
    value <The type of PDF object that this dictionary describes; shall be FontDescriptor for a font descriptor.>
  state <FontName>
    field name
    force true
    value <The PostScript name of the font. This name shall be the same as the value of BaseFont in the font or CIDFont dictionary that refers to this font descriptor.>
  state <FontFamily>
    field byte string
    force false
    value <A byte string specifying the preferred font family name. EXAMPLE 1 For the font Times Bold Italic, the FontFamily is Times.>
  state <FontStretch>
    field name
    force false
    value <The font stretch value. It shall be one of these names (ordered from narrowest to widest): UltraCondensed, ExtraCondensed, Condensed, SemiCondensed, Normal, SemiExpanded, Expanded, ExtraExpanded or UltraExpanded. The specific interpretation of these values varies from font to font. EXAMPLE 2 Condensed in one font may appear most similar to Normal in another.>
  state <FontWeight>
    field number
    force false
    value <The weight (thickness) component of the fully-qualified font name or font specifier. The possible values shall be 100, 200, 300, 400, 500, 600, 700, 800, or 900, where each number indicates a weight that is at least as dark as its predecessor. A value of 400 shall indicate a normal weight; 700 shall indicate bold. The specific interpretation of these values varies from font to font. EXAMPLE 3 300 in one font may appear most similar to 500 in another.>
  state <Flags>
    field integer
    force true
    value <A collection of flags defining various characteristics of the font (see 9.8.2, "Font Descriptor Flags").>
  state <FontBBox>
    field rectangle
    force true
    value <A rectangle (see 7.9.5, "Rectangles"), expressed in the glyph coordinate system, that shall specify the font bounding box. This should be the smallest rectangle enclosing the shape that would result if all of the glyphs of the font were placed with their origins coincident and then filled.>
  state <ItalicAngle>
    field number
    force true
    value <The angle, expressed in degrees counterclockwise from the vertical, of the dominant vertical strokes of the font. EXAMPLE 4 The 9-o’clock position is 90 degrees, and the 3- o’clock position is –90 degrees. The value shall be negative for fonts that slope to the right, as almost all italic fonts do.>
  state <Ascent>
    field number
    force true
    value <The maximum height above the baseline reached by glyphs in this font. The height of glyphs for accented characters shall be excluded.>
  state <Descent>
    field number
    force true
    value <The maximum depth below the baseline reached by glyphs in this font. The value shall be a negative number.>
  state <Leading>
    field number
    force false
    value <The spacing between baselines of consecutive lines of text. Default value: 0.>
  state <CapHeight>
    field number
    force true
    value <The vertical coordinate of the top of flat capital letters, measured from the baseline.>
  state <XHeight>
    field number
    force false
    value <The font’s x height: the vertical coordinate of the top of flat nonascending lowercase letters (like the letter x), measured from the baseline, in fonts that have Latin characters. Default value: 0.>
  state <StemV>
    field number
    force true
    value <The thickness, measured horizontally, of the dominant vertical stems of glyphs in the font.>
  state <StemH>
    field number
    force false
    value <The thickness, measured vertically, of the dominant horizontal stems of glyphs in the font. Default value: 0.>
  state <AvgWidth>
    field number
    force false
    value <The average width of glyphs in the font. Default value: 0.>
  state <MaxWidth>
    field number
    force false
    value <The maximum width of glyphs in the font. Default value: 0.>
  state <MissingWidth>
    field number
    force false
    value <The width to use for character codes whose widths are not specified in a font dictionary’s Widths array. This shall have a predictable effect-only-if-all-such-codes-map-to-glyphs-whose-actual-widths-are-the-same as the value of the MissingWidth entry. Default value: 0.>
  state <FontFile>
    field stream
    force false
    value <A stream containing a Type 1 font program (see 9.9, "Embedded Font Programs").>
  state <FontFile2>
    field stream
    force false
    value <A stream containing a TrueType font program (see 9.9, "Embedded Font Programs").>
  state <FontFile3>
    field stream
    force false
    value <A stream containing a font program whose format is specified by the Subtype entry in the stream dictionary (see Table 126).>
  state <CharSet>
    field ascii-string
    field byte-string
    force false
    value <A string listing the character names defined in a font subset. The names in this string shall be in PDF syntax—that is, each name preceded by a slash (/). The names may appear in any order. The name .notdef shall be omitted; it shall exist in the font subset. If this entry is absent, the only indication of a font subset shall be the subset tag in the FontName entry (see 9.6.4, "Font Subsets").>

block table-123-font-flags
  block 1
    state <FixedPitch>
    brief <All glyphs have the same width (as opposed to proportional or variable-pitch fonts, which have different widths).>
  block 2
    state <Serif>
    brief <Glyphs have serifs, which are short strokes drawn at an angle on the top and bottom of glyph stems. (Sans serif fonts do not have serifs.)>
  block 3
    state <Symbolic>
    brief <Font contains glyphs outside the Adobe standard Latin character set. This flag and the Nonsymbolic flag shall not both be set or both be clear.>
  block 4
    state <Script>
    brief <Glyphs resemble cursive handwriting.>
  block 6
    state <Nonsymbolic>
    brief <Font uses the Adobe standard Latin character set or a subset of it.>
  block 7
    state <Italic>
    brief <Glyphs have dominant vertical strokes that are slanted.>
  block 17
    state <AllCap>
    brief <Font contains no lowercase letters; typically used for display purposes, such as for titles or headlines.>
  block 18
    state <SmallCap>
    brief <Font contains both uppercase and lowercase letters. The uppercase letters are similar to those in the regular version of the same typeface family. The glyphs for the lowercase letters have the same shapes as the corresponding uppercase letters, but they are sized and their proportions adjusted so that they have the same size and stroke weight as lowercase glyphs in the same typeface family.>
  block 19
    state <ForceBold>
    brief <See description after Note 1 in this sub-clause.>

block table-124-additional-font-descriptor-entries-for-cidfonts
  state <Style>
    field dictionary
    force false
    value <A dictionary containing entries that describe the style of the glyphs in the font (see 9.8.3.2, "Style").>
  state <Lang>
    field name
    force false
    value < A name specifying the language of the font, which may be used for encodings where the language is not implied by the encoding itself. The value shall be one of the codes defined by Internet RFC 3066, Tags for the Identification of Languages or (PDF 1.0) 2-character language codes defined by ISO 639 (see the Bibliography). If this entry is absent, the language shall be considered to be unknown.>
  state <FD>
    field dictionary
    force false
    value <A dictionary whose keys identify a class of glyphs in a CIDFont. Each value shall be a dictionary containing entries that shall override the corresponding values in the main font descriptor dictionary for that class of glyphs (see 9.8.3.3, "FD").>
  state <CIDSet>
    field stream
    force false
    value <A stream identifying which CIDs are present in the CIDFont file. If this entry is present, the CIDFont shall contain only a subset of the glyphs in the character collection defined by the CIDSystemInfo dictionary. If it is absent, the only indication of a CIDFont subset shall be the subset tag in the FontName entry (see 9.6.4, "Font Subsets"). The stream’s data shall be organized as a table of-bits-indexed-by-cid. the bits shall be stored in bytes with the high-order bit first. Each bit shall correspond to a CID. The most significant bit of the first byte shall correspond to CID 0, the next bit to CID 1, and so on.>

block type-1-halftone-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Halftone for a halftone dictionary.>
  state <HalftoneType>
    field integer
    force true
    value <A code identifying the halftone type that this dictionary describes; shall be 1 for this type of halftone.>
  state <HalftoneName>
    field byte string
    force false
    value <The name of the halftone dictionary.>
  state <Frequency>
    field number
    force true
    value <The screen frequency, measured in halftone cells per inch in device space.>
  state <Angle>
    field number
    force true
    value <The screen angle, in degrees of rotation counterclockwise with respect to the device coordinate system. NOTE Most output devices have left-handed device spaces. On such devices, a counterclockwise angle in device space corresponds to a clockwise angle in default user space and on the physical medium.>
  state <SpotFunction>
    field function
    field name
    force true
    value <A function object defining the order in which device pixels within a screen cell shall be adjusted for different gray levels, or the name of one of the predefined spot functions (see Table 128).>
  state <AccurateScreens>
    field boolean
    force false
    value <A flag specifying whether to invoke a special halftone algorithm that is extremely precise but computationally expensive; see Note 1 for further discussion. Default value: false.>
  state <TransferFunction>
    field function
    field name
    force false
    value <A transfer function, which overrides the current transfer function in the graphics state for the same component. This entry shall be present if the dictionary is a component of a type 5 halftone (see “Type 5 Halftones” in 10.5.5.6) and represents either a nonprimary or nonstandard primary colour component (see 10.4, "Transfer Functions"). The name Identity may be used to specify the identity function.>

block table-131-additional-entries-specific-to-a-type-6-halftone-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Halftone for a halftone dictionary.>
  state <HalftoneType>
    field integer
    force true
    value <A code identifying the halftone type that this dictionary describes; shall be 6 for this type of halftone.>
  state <HalftoneName>
    field byte string
    force false
    value <The name of the halftone dictionary.>
  state <Width>
    field integer
    force true
    value <The width of the threshold array, in device pixels.>
  state <Height>
    field integer
    force true
    value <The height of the threshold array, in device pixels.>
  state <TransferFunction>
    field function
    field name
    force false
    value <A transfer function, which shall override the current transfer function in the graphics state for the same component. This entry shall be present if the dictionary is a component of a type 5 halftone (see “Type 5 Halftones” in 10.5.5.6) and represents either a nonprimary or nonstandard primary colour component (see 10.4, "Transfer Functions"). The name Identity may be used to specify the identity function.>

block table-132-additional-entries-specific-to-a-type-10-halftone-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Halftone for a halftone dictionary.>
  state <HalftoneType>
    field integer
    force true
    value <A code identifying the halftone type that this dictionary describes; shall be 10 for this type of halftone.>
  state <HalftoneName>
    field byte string
    force false
    value <The name of the halftone dictionary.>
  state <Xsquare>
    field integer
    force true
    value <The side of square X, in device pixels; see below.>
  state <Ysquare>
    field integer
    force true
    value <The side of square Y, in device pixels; see below.>
  state <TransferFunction>
    field function
    field name
    force false
    value <A transfer function, which shall override the current transfer function in the graphics state for the same component. This entry shall be present if the dictionary is a component of a type 5 halftone (see “Type 5 Halftones” in 10.5.5.6) and represents either a nonprimary or nonstandard primary colour component (see 10.4, "Transfer Functions"). The name Identity may be used to specify the identity function.>

block table-133-additional-entries-specific-to-a-type-16-halftone-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Halftone for a halftone dictionary.>
  state <HalftoneType>
    field integer
    force true
    value <A code identifying the halftone type that this dictionary describes; shall be 16 for this type of halftone.>
  state <HalftoneName>
    field byte string
    force false
    value <The name of the halftone dictionary.>
  state <Width>
    field integer
    force true
    value <The width of the first (or only) rectangle in the threshold array, in device pixels.>
  state <Height>
    field integer
    force true
    value <The height of the first (or only) rectangle in the threshold array, in device pixels.>
  state <Width2>
    field integer
    force false
    value <The width of the optional second rectangle in the threshold array, in device pixels. If this entry is present, the Height2 entry shall be present as well. If this entry is absent, the Height2 entry shall also be absent, and the threshold array has only one rectangle.>
  state <Height2>
    field integer
    force false
    value <The height of the optional second rectangle in the threshold array, in device pixels.>
  state <TransferFunction>
    field function
    field name
    force false
    value <A transfer function, which shall override the current transfer function in the graphics state for the same component. This entry shall be present if the dictionary is a component of a type 5 halftone (see 10.5.5.6, "Type 5 Halftones") and represents either a nonprimary or nonstandard primary colour component (see 10.4, "Transfer Functions"). The name Identity may be used to specify the identity function.>

block table-136-standard-separable-blend-modes
  state <Normal>
    Result B ( cb , cs ) = cs NOTE Selects the source colour, ignoring the backdrop.
  state <Compatible>
    Result Same as Normal. This mode exists only for compatibility and should not be used.
  state <Multiply>
    Result B ( cb , cs ) = cb × cs NOTE 1 Multiplies the backdrop and source colour values. NOTE 2 The result colour is always at least as dark as either of the two constituent colours. Multiplying any colour with black produces black; multiplying with white leaves the original colour unchanged. Painting successive overlapping objects with a colour other than black or white produces progressively darker colours.
  state <Screen>
    Result B ( cb , cs ) = 1 – [(1 – cb) × (1 – cs)] = cb + cs – (cb × cs) NOTE 3 Multiplies the complements of the backdrop and source colour values, then complements the result. NOTE 4 The result colour is always at least as light as either of the two constituent colours. Screening any colour with white produces white; screening with black leaves the original colour unchanged. The effect is similar to projecting multiple photographic slides simultaneously onto a single screen.
  state <Overlay>
    Result B(cb, cs) = HardLight(cs, cb) NOTE 5 Multiplies or screens the colours, depending on the backdrop colour value. Source colours overlay the backdrop while preserving its highlights and shadows. The backdrop colour is not replaced but is mixed with the source colour to reflect the lightness or darkness of the backdrop.
  state <Darken>
    Result B ( cb , cs ) = min ( cb , cs ) NOTE 6 Selects the darker of the backdrop and source colours. NOTE 7 The backdrop is replaced with the source where the source is darker; otherwise, it is left unchanged.
  state <Lighten>
    Result B ( cb , cs ) = max ( cb , cs ) NOTE 8 Selects the lighter of the backdrop and source colours. NOTE 9 The backdrop is replaced with the source where the source is lighter; otherwise, it is left unchanged.
  state <ColorDodge>
    Result ⎧min(1, cb ⁄ (1 – cs)) if cs < 1 B(cb, cs) = ⎨1 if c = ⎩ s NOTE 10 Brightens the backdrop colour to reflect the source colour. Painting with black produces no changes.
  state <ColorBurn>
    Result ⎧1 – min(1, (1 – cb) ⁄ cs) if cs > 0 B(cb, cs) = ⎨0 if c = ⎩ s NOTE 11 Darkens the backdrop colour to reflect the source colour. Painting with white produces no change.
  state <HardLight>
    Result ⎧Multiply(cb, 2 × cs) if cs ≤ 0.5 B(cb, cs) = ⎨Screen(c , 2 × c – 1) if c > 0.5 ⎩ b s s NOTE 12 Multiplies or screens the colours, depending on the source colour value. The effect is similar to shining a harsh spotlight on the backdrop.
  state <SoftLight>
    Result ⎧cb – (1 – 2 × cs) × cb × (1 – cb) if cs ≤ 0. B(cb, cs) = ⎨c + (2 × c – 1) × (D(c ) – c ) if c > 0. ⎩ b s b b s where ⎧((16 × x – 12) × x + 4) × x if x ≤ 0.25 D(x) = ⎨ ⎩ x if x > 0.25 NOTE 13 Darkens or lightens the colours, depending on the source colour value. The effect is similar to shining a diffused spotlight on the backdrop.
  state <Difference>
    Result B ( cb , cs ) = cb – cs NOTE 14 Subtracts the darker of the two constituent colours from the lighter colour: NOTE 15 Painting with white inverts the backdrop colour; painting with black produces no change.
  state <Exclusion>
    Result B(cb, cs) = cb + cs – 2 × cb × c NOTE 16 Produces an effect similar to that of the Difference mode but lower in contrast. Painting with white inverts the backdrop colour; painting with black produces no change.

block table-137-standard-nonseparable-blend-modes
  state <Hue>
    Result B(Cb, Cs) = SetLum(SetSat(Cs, Sat(Cb)), Lum(Cb)) NOTE 1 Creates a colour with the hue of the source colour and the saturation and luminosity of the backdrop colour.
  state <Saturation>
    Result B(Cb, Cs) = SetLum(SetSat(Cb, Sat(Cs)), Lum(Cb)) NOTE 2 Creates a colour with the saturation of the source colour and the hue and luminosity of the backdrop colour. Painting with this mode in an area of the backdrop that is a pure gray (no saturation) produces no change.
  state <Color>
    Result B(Cb, Cs) = SetLum(Cs, Lum(Cb)) NOTE 3 Creates a colour with the hue and saturation of the source colour and the luminosity of the backdrop colour. This preserves the gray levels of the backdrop and is useful for colouring monochrome images or tinting colour images.
  state <Luminosity>
    Result B(Cb, Cs) = SetLum(Cb, Lum(Cs)) NOTE 4 Creates a colour with the luminosity of the source colour and the hue and saturation of the backdrop colour. This produces an inverse effect to that of the Color mode.

block soft-mask-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Mask for a soft-mask dictionary.>
  state <S>
    field name
    force true
    value < A subtype specifying the method to be used in deriving the mask values from the transparency group specified by the G entry: Alpha The group’s computed alpha shall be used, disregarding its colour (see “Deriving a Soft Mask from Group Alpha”). Luminosity The group’s computed colour shall be converted to a single-component luminosity value (see “Deriving a Soft Mask from Group Luminosity”).>
  state <G>
    field stream
    force true
    value <A transparency group XObject (see “Transparency Group XObjects”) to be used as the source of alpha or colour values for deriving the mask. If the subtype S is Luminosity, the group attributes dictionary shall contain a CS entry defining the colour space in which the compositing computation is to be performed.>
  state <BC>
    field array
    force false
    value <An array of component values specifying the colour to be used as the backdrop against which to composite the transparency group XObject G. This entry shall be consulted only if the subtype S is Luminosity. The array shall consist of n numbers, where n is the number of components in the colour space specified by the CS entry in the group attributes dictionary (see “Transparency Group XObjects”). Default value: the colour space’s initial value, representing black.>
  state <TR>
    field function
    field name
    force false
    value < A function object (see “Functions”) specifying the transfer function to be used in deriving the mask values. The function shall accept one input, the computed group alpha or luminosity (depending on the value of the subtype S), and shall return one output, the resulting mask value. The input shall be in the range 0.0 to 1.0. The computed output shall be in the range 0.0 to 1.0; if it falls outside this range, it shall be forced to the nearest valid value. The name Identity may be specified in place of a function object to designate the identity function. Default value: Identity.>

block table-145-restrictions-on-the-entries-in-a-soft-mask-image-dictionary
  state <Type>
    Restriction If present, shall be XObject.
  state <Subtype>
    Restriction Shall be Image.
  state <Width>
    Restriction If a Matte entry (see Table 146) is present, shall be the same as the Width value of the parent image; otherwise independent of it. Both images shall be mapped to the unit square in user space (as are all images), regardless of whether the samples coincide individually.
  state <Height>
    Restriction Same considerations as for Width.
  state <ColorSpace>
    Restriction Required; shall be DeviceGray.
  state <BitsPerComponent>
    Restriction Required.
  state <Intent>
    Restriction Ignored.
  state <ImageMask>
    Restriction Shall be false or absent.
  state <Mask>
    Restriction Shall be absent.
  state <SMask>
    Restriction Shall be absent.
  state <Decode>
    Restriction Default value: [0 1].
  state <Interpolate>
    Restriction Optional.
  state <Alternates>
    Restriction Ignored.
  state <Name>
    Restriction Ignored.
  state <StructParent>
    Restriction Ignored.
  state <ID>
    Restriction Ignored.
  state <OPI>
    Restriction Ignored.

block table-146-additional-entry-in-a-soft-mask-image-dictionary
  state <Matte>
    field array
    force false
    value <An array of component values specifying the matte colour with which the image data in the parent image shall have been preblended. The array shall consist of n numbers, where n is the number of components in the colour space specified by the ColorSpace entry in the parent image’s image dictionary; the numbers shall be valid colour components in that colour space. If this entry is absent, the image data shall not be preblended.>

block viewer-preferences-dictionary
  state <HideToolbar>
    field boolean
    force false
    value <A flag specifying whether to hide the conforming reader’s tool bars when the document is active. Default value: false.>
  state <HideMenubar>
    field boolean
    force false
    value <A flag specifying whether to hide the conforming reader’s menu bar when the document is active. Default value: false.>
  state <HideWindowUI>
    field boolean
    force false
    value <A flag specifying whether to hide user interface elements in the document’s window (such as scroll bars and navigation controls), leaving only the document’s contents displayed. Default value: false.>
  state <FitWindow>
    field boolean
    force false
    value <A flag specifying whether to resize the document’s window to fit the size of the first displayed page. Default value: false.>
  state <CenterWindow>
    field boolean
    force false
    value <A flag specifying whether to position the document’s window in the center of the screen. Default value: false.>
  state <DisplayDocTitle>
    field boolean
    force false
    value <A flag specifying whether the window’s title bar should display the document title taken from the Title entry of the document information dictionary (see 14.3.3, “Document Information Dictionary”). If false, the title bar should instead display the name of the PDF file containing the document. Default value: false.>
  state <NonFullScreenPageMode>
    field name
    force false
    value <The document’s page mode, specifying how to display the document on exiting full-screen mode: UseNone Neither document outline nor thumbnail images visible UseOutlines Document outline visible UseThumbs Thumbnail images visible UseOC Optional content group panel visible This entry is meaningful only if the value of the PageMode entry in the Catalog dictionary (see 7.7.2, “Document Catalog”) is FullScreen; it shall be ignored otherwise. Default value: UseNone.>
  state <Direction>
    field name
    force false
    value <The predominant reading order for text: L2R Left to right R2L Right to left (including vertical writing systems, such as Chinese, Japanese, and Korean) This entry has no direct effect on the document’s contents or page numbering but may be used to determine the relative positioning of pages when displayed side by side or printed n-up. Default value: L2R.>
  state <ViewArea>
    field name
    force false
    value <The name of the page boundary representing the area of a page that shall be displayed when viewing the document on the screen. The value is the key designating the relevant page boundary in the page object (see 7.7.3, “Page Tree” and 14.11.2, “Page Boundaries”). If the specified page boundary is not defined in the page object, its default value shall be used, as specified in Table 30. Default value: CropBox. This entry is intended primarily for use by prepress applications that interpret or manipulate the page boundaries as described in 14.11.2, “Page Boundaries.” NOTE 1 Most conforming readers disregard it.>
  state <ViewClip>
    field name
    force false
    value <The name of the page boundary to which the contents of a page shall be clipped when viewing the document on the screen. The value is the key designating the relevant page boundary in the page object (see 7.7.3, “Page Tree” and 14.11.2, “Page Boundaries”). If the specified page boundary is not defined in the page object, its default value shall be used, as specified in Table 30. Default value: CropBox. This entry is intended primarily for use by prepress applications that interpret or manipulate the page boundaries as described in 14.11.2, “Page Boundaries.” NOTE 2 Most conforming readers disregard it.>
  state <PrintArea>
    field name
    force false
    value <The name of the page boundary representing the area of a page that shall be rendered when printing the document. The value is the key designating the relevant page boundary in the page object (see 7.7.3, “Page Tree” and 14.11.2, “Page Boundaries”). If the specified page boundary is not defined in the page object, its default value shall be used, as specified in Table 30. Default value: CropBox. This entry is intended primarily for use by prepress applications that interpret or manipulate the page boundaries as described in 14.11.2, “Page Boundaries.” NOTE 3 Most conforming readers disregard it.>
  state <PrintClip>
    field name
    force false
    value <The name of the page boundary to which the contents of a page shall be clipped when printing the document. The value is the key designating the relevant page boundary in the page object (see 7.7.3, “Page Tree” and 14.11.2, “Page Boundaries”). If the specified page boundary is not defined in the page object, its default value shall be used, as specified in Table 30. Default value: CropBox. This entry is intended primarily for use by prepress applications that interpret or manipulate the page boundaries as described in 14.11.2, “Page Boundaries.” NOTE 4 Most conforming readers disregard it.>
  state <PrintScaling>
    field name
    force false
    value <The page scaling option that shall be selected when a print dialog is displayed for this document. Valid values are None, which indicates no page scaling, and AppDefault, which indicates the conforming reader’s default print scaling. If this entry has an unrecognized value, AppDefault shall be used. Default value: AppDefault. If the print dialog is suppressed and its parameters are provided from some other source, this entry nevertheless shall be honored.>
  state <Duplex>
    field name
    force false
    value <The paper handling option that shall be used when printing the file from the print dialog. The following values are valid: Simplex Print single-sided DuplexFlipShortEdge Duplex and flip on the short edge of the sheet DuplexFlipLongEdge Duplex and flip on the long edge of the sheet Default value: none>
  state <PickTrayByPDFSize>
    field boolean
    force false
    value <A flag specifying whether the PDF page size shall be used to select the input paper tray. This setting influences only the preset values used to populate the print dialog presented by a conforming reader. If PickTrayByPDFSize is true, the check box in the print dialog associated with input paper tray shall be checked. This setting has no effect on operating systems that do not provide the ability to pick the input tray by size. Default value: as defined by the conforming reader>
  state <PrintPageRange>
    field array
    force false
    value <The page numbers used to initialize the print dialog box when the file is printed. The array shall contain an even number of integers to be interpreted in pairs, with each pair specifying the first and last pages in a sub-range of pages to be printed.The first page of the PDF file shall be denoted by 1. Default value: as defined by the conforming reader>
  state <NumCopies>
    field integer
    force false
    value <The number of copies that shall be printed when the print dialog is opened for this file. Values outside this range shall be ignored. Default value: as defined by the conforming reader, but typically 1>

block outline-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Outlines for an outline dictionary.>
  state <First>
    field dictionary
    force true
    value <An outline item dictionary representing the first top- level item in the outline.>
  state <Last>
    field dictionary
    force true
    value <An outline item dictionary representing the last top- level item in the outline.>
  state <Count>
    field integer
    force true
    value <Total number of visible outline items at all levels of the outline. The value cannot be negative. This entry shall be omitted if there are no open outline items.>

block outline-item-dictionary
  state <Title>
    field text
    force true
    value <The text that shall be displayed on the screen for this item.>
  state <Parent>
    field dictionary
    force true
    value <The parent of this item in the outline hierarchy. The parent of a top-level item shall be the outline dictionary itself.>
  state <Prev>
    field dictionary
    force true
    value <The previous item at this outline level.>
  state <Next>
    field dictionary
    force true
    value <The next item at this outline level.>
  state <First>
    field dictionary
    force true
    value <The first of this item’s immediate children in the outline hierarchy.>
  state <Last>
    field dictionary
    force true
    value <The last of this item’s immediate children in the outline hierarchy.>
  state <Count>
    field integer
    force true
    value <If the outline item is open, Count is the sum of the number of visible descendent outline items at all levels. The number of visible descendent outline items shall be determined by the following recursive process: Step 1. Initialize Count to zero. Step 2. Add to Count the number of immediate children. During repetitions of this step, update only the Count of the original outline item. Step 3. For each of those immediate children whose Count is positive and non-zero, repeat steps 2 and 3. If the outline item is closed, Count is negative and its absolute value is the number of descendants that would be visible if the outline item were opened.>
  state <Dest>
    field name, byte-string
    field array
    force false
    value <The destination that shall be displayed when this item is activated (see 12.3.2, “Destinations”).>
  state <A>
    field dictionary
    force false
    value <The action that shall be performed when this item is activated (see 12.6, “Actions”).>
  state <SE>
    field dictionary
    force false
    value <The structure element to which the item refers (see 14.7.2, “Structure Hierarchy”). (PDF 1.0) An item may also specify a destination (Dest) corresponding to an area of a page where the contents of the designated structure element are displayed.>
  state <C>
    field array
    force false
    value <An array of three numbers in the range 0.0 to 1.0, representing the components in the DeviceRGB colour space of the colour that shall be used for the outline entry’s text. Default value: [ 0.0 0.0 0.0].>
  state <F>
    field integer
    force false
    value <A set of flags specifying style characteristics for displaying the outline item’s text (see Table 154). Default value: 0.>

block collection-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Collection for a collection dictionary.>
  state <Schema>
    field dictionary
    force false
    value <A collection schema dictionary (see Table 156). If absent, the conforming reader may choose useful defaults that are known to exist in a file specification dictionary, such as the file name, file size, and modified date.>
  state <D>
    field byte string
    force false
    value <A string that identifies an entry in the EmbeddedFiles name tree, determining the document that shall be initially presented in the user interface. If the D entry is missing or in error, the initial document shall be the one that contains the collection dictionary.>
  state <View>
    field name
    force false
    value <The initial view. The following values are valid: D The collection view shall be presented in details mode, with all information in the Schema dictionary presented in a multi-column format. This mode provides the most information to the user. T The collection view shall be presented in tile mode, with each file in the collection denoted by a small icon and a subset of information from the Schema dictionary. This mode provides top-level information about the file attachments to the user. H The collection view shall be initially hidden, The conforming reader shall provide means for the user to view the collection by some explicit action. Default value: D>
  state <Sort>
    field dictionary
    force false
    value <A collection sort dictionary, which specifies the order in which items in the collection shall be sorted in the user interface (see Table 158).>

block collection-schema-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be CollectionSchema for a collection schema dictionary.>
  state <Other keys>
    field dictionary
    force false
    value <A collection field dictionary. Each key name is chosen at the discretion of the conforming writer. The key name shall be used to identify a corresponding collection item dictionary referenced from the file specification dictionary's CI entry (see CI key in Table 44).>

block collection-field-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be CollectionField for a collection field dictionary.>
  state <Subtype>
    field name
    force true
    value <The subtype of collection field or file-related field that this dictionary describes. This entry identifies the type of data that shall be stored in the field. The following values identify the types of fields in the collection item or collection subitem dictionary: S A text field. The field data shall be stored as a PDF text string. D A date field. The field data shall be stored as a PDF date string. N A number field. The field data shall be stored as a PDF number. The following values identify the types of file-related fields: F The field data shall be the file name of the embedded file stream, as identified by the UF entry of the file specification, if present; otherwise by the F entry of the file specification (see Table 44). Desc The field data shall be the description of the embedded file stream, as identified by the Desc entry in the file specification dictionary (see Table 44). ModDate The field data shall be the modification date of the embedded file stream, as identified by the ModDate entry in the embedded file parameter dictionary (see Table 46). CreationDate The field data shall be the creation date of the embedded file stream, as identified by the CreationDate entry in the embedded file parameter dictionary (see Table 46). Size The field data shall be the size of the embedded file, as identified by the Size entry in the embedded file parameter dictionary (see Table 46).>
  state <N>
    field text
    force true
    value <The textual field name that shall be presented to the user by the conforming reader.>
  state <O>
    field integer
    force false
    value <The relative order of the field name in the user interface. Fields shall be sorted by the conforming reader in ascending order.>
  state <V>
    field boolean
    force false
    value <The initial visibility of the field in the user interface. Default value: true.>
  state <E>
    field boolean
    force false
    value <A flag indicating whether the conforming reader should provide support for editing the field value. Default value: false.>

block collection-sort-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be CollectionSort for a collection sort dictionary.>
  state <S>
    field name
    field array
    force true
    value <The name or names of fields that the conforming reader shall use to sort the items in the collection. If the value is a name, it identifies a field described in the parent collection dictionary. If the value is an array, each element of the array shall be a name that identifies a field described in the parent collection dictionary. The array form shall be used to allow additional fields to contribute to the sort, where each additional field shall be used to break ties. More specifically, if multiple collection item dictionaries have the same value for the first field named in the array, the values for successive fields named in the array shall be used for sorting, until a unique order is determined or until the named fields are exhausted.>
  state <A>
    field boolean or array
    force false
    value <If the value is a boolean, it specifies whether the conforming reader shall sort the items in the collection in ascending order (true) or descending order (false). If the value is an array, each element of the array shall be a boolean value that specifies whether the entry at the same index in the S array shall be sorted in ascending or descending order. If the number of entries in the A array is larger than the number of entries in the S array the extra entries in the A array shall be ignored. If the number of entries in the A array is less than the number of entries in the S array the missing entries in the A array shall be assumed to be true. Default value: true.>

block page-label-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be PageLabel for a page label dictionary.>
  state <S>
    field name
    force false
    value <The numbering style that shall be used for the numeric portion of each page label: D Decimal arabic numerals R Uppercase roman numerals r Lowercase roman numerals A Uppercase letters (A to Z for the first 26 pages, AA to ZZ for the next 26, and so on) a Lowercase letters (a to z for the first 26 pages, aa to zz for the next 26, and so on) There is no default numbering style; if no S entry is present, page labels shall consist solely of a label prefix with no numeric portion. NOTE If the P entry (next) specifies the label prefix Contents, each page is simply labeled Contents with no page number. (If the P entry is also missing or empty, the page label is an empty string.)>
  state <P>
    field text
    force false
    value <The label prefix for page labels in this range.>
  state <St>
    field integer
    force false
    value <The value of the numeric portion for the first page label in the range. Subsequent pages shall be numbered sequentially from this value, which shall be greater than or equal to 1. Default value: 1.>

block thread-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Thread for a thread dictionary.>
  state <F>
    field dictionary
    force true
    value <The first bead in the thread.>
  state <I>
    field dictionary
    force false
    value <A thread information dictionary containing information about the thread, such as its title, author, and creation date. The contents of this dictionary shall conform to the syntax for the document information dictionary (see 14.3.3, “Document Information Dictionary”).>

block bead-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Bead for a bead dictionary.>
  state <T>
    field dictionary
    force true
    value <The thread to which this bead belongs. (PDF 1.1) This entry shall be permitted only for the first bead of a thread. (PDF 1.2) It shall be permitted for any bead but required only for the first.>
  state <N>
    field dictionary
    force true
    value <The next bead in the thread. In the last bead, this entry shall refer to the first bead.>
  state <V>
    field dictionary
    force true
    value <The previous bead in the thread. In the first bead, this entry shall refer to the last bead.>
  state <P>
    field dictionary
    force true
    value <The page object representing the page on which this bead appears.>
  state <R>
    field rectangle
    force true
    value <A rectangle specifying the location of this bead on the page.>

block transition-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Trans for a transition dictionary.>
  state <S>
    field name
    force false
    value <The transition style that shall be used when moving to this page from another during a presentation. Default value: R. Split Two lines sweep across the screen, revealing the new page. The lines may be either horizontal or vertical and may move inward from the edges of the page or outward from the center, as specified by the Dm and M entries, respectively. Blinds Multiple lines, evenly spaced across the screen, synchronously sweep in the same direction to reveal the new page. The lines may be either horizontal or vertical, as specified by the Dm entry. Horizontal lines move downward; vertical lines move to the right. Box A rectangular box sweeps inward from the edges of the page or outward from the center, as specified by the M entry, revealing the new page. Wipe A single line sweeps across the screen from one edge to the other in the direction specified by the Di entry, revealing the new page. Dissolve The old page dissolves gradually to reveal the new one. Glitter Similar to Dissolve, except that the effect sweeps across the page in a wide band moving from one side of the screen to the other in the direction specified by the Di entry. R The new page simply replaces the old one with no special transition effect; the D entry shall be ignored. Fly (PDF 1.5) Changes are flown out or in (as specified by M), in the direction specified by Di, to or from a location that is offscreen except when Di is None.>
  state <no>
    field The old page slides off the screen while the new page slides in, pushing the old page out in the direction specified by Di. Cover (PDF 1.5) The new page slides on to the screen in the direction specified by Di, covering the old page. Uncover (PDF 1.5) The old page slides off the screen in the direction specified by Di, uncovering the new page in the direction specified by Di. Fade (PDF 1.5) The new page gradually becomes visible through the old one.
    force
    value
  state <D>
    field number
    force false
    value <The duration of the transition effect, in seconds. Default value: 1.>
  state <Dm>
    field name
    force false
    value <The dimension in which the specified transition effect shall occur: H Horizontal V Vertical Default value: H.>
  state <M>
    field name
    force false
    value <The direction of motion for the specified transition effect: I Inward from the edges of the page O Outward from the center of the page Default value: I.>
  state <Di>
    field number or name
    force false
    value <The direction in which the specified transition effect shall moves, expressed in degrees counterclockwise starting from a left-to-right direction. (This differs from the page object’s Rotate entry, which is measured clockwise from the top.) If the value is a number, it shall be one of: 0 Left to right 90 Bottom to top (Wipe only) 180 Right to left (Wipe only) 270 Top to bottom 315 Top-left to bottom-right (Glitter only) If the value is a name, it shall be None, which is relevant only for the Fly transition when the value of SS is not 1.0. Default value: 0.>
  state <SS>
    field number
    force false
    value <The starting or ending scale at which the changes shall be drawn. If M specifies an inward transition, the scale of the changes drawn shall progress from SS to 1.0 over the course of the transition. If M specifies an outward transition, the scale of the changes drawn shall progress from 1.0 to SS over the course of the transition Default: 1.0.>
  state <B>
    field boolean
    force false
    value <If true, the area that shall be flown in is rectangular and opaque. Default: false.>

block navigation-node-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; shall be NavNode for a navigation node dictionary.>
  state <NA>
    field dictionary
    force false
    value <An action (which may be the first in a sequence of actions) that shall be executed when a user navigates forward.>
  state <PA>
    field dictionary
    force false
    value <An action (which may be the first in a sequence of actions) that shall be executed when a user navigates backward.>
  state <Next>
    field dictionary
    force false
    value <The next navigation node, if any.>
  state <Prev>
    field dictionary
    force false
    value <The previous navigation node, if any.>
  state <Dur>
    field number
    force false
    value <The maximum number of seconds before the conforming reader shall automatically advance forward to the next navigation node. If this entry is not specified, no automatic advance shall occur.>

block table-164-entries-common-to-all-annotation-dictionaries
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Annot for an annotation dictionary.>
  state <Subtype>
    field name
    force true
    value <The type of annotation that this dictionary describes; see Table 169 for specific values.>
  state <Rect>
    field rectangle
    force true
    value <The annotation rectangle, defining the location of the annotation on the page in default user space units.>
  state <Contents>
    field text
    force false
    value <Text that shall be displayed for the annotation or, if this type of annotation does not display text, an alternate description of the annotation’s contents in human-readable form. In either case, this text is useful when extracting the document’s contents in support of accessibility to users with disabilities or for other purposes (see 14.9.3, “Alternate Descriptions”). See 12.5.6, “Annotation Types” for more details on the meaning of this entry for each annotation type.>
  state <P>
    field dictionary
    force false
    value <An indirect reference to the page object with which this annotation is associated. This entry shall be present in screen annotations associated with rendition actions (PDF 1.5; see 12.5.6.18, “Screen Annotations” and 12.6.4.13, “Rendition Actions”).>
  state <NM>
    field text
    force false
    value <The annotation name, a text string uniquely identifying it among all the annotations on its page.>
  state <M>
    field date
    field text
    force false
    value <The date and time when the annotation was most recently modified. The format should be a date string as described in 7.9.4, “Dates,” but conforming readers shall accept and display a string in any format.>
  state <F>
    field integer
    force false
    value <A set of flags specifying various characteristics of the annotation (see 12.5.3, “Annotation Flags”). Default value: 0.>
  state <AP>
    field dictionary
    force false
    value <An appearance dictionary specifying how the annotation shall be presented visually on the page (see 12.5.5, “Appearance Streams”). Individual annotation handlers may ignore this entry and provide their own appearances.>
  state <AS>
    field name
    force true
    value <The annotation’s appearance state, which selects the applicable appearance stream from an appearance subdictionary (see Section 12.5.5, “Appearance Streams”).>
  state <Border>
    field array
    force false
    value <An array specifying the characteristics of the annotation’s border, which shall be drawn as a rounded rectangle. (PDF 1.0) The array consists of three numbers defining the horizontal corner radius, vertical corner radius, and border width, all in default user space units. If the corner radii are 0, the border has square (not rounded) corners; if the border width is 0, no border is drawn. (PDF 1.1) The array may have a fourth element, an optional dash array defining a pattern of dashes and gaps that shall be used in drawing the border. The dash array shall be specified in the same format as in the line dash pattern parameter of the graphics state (see 8.4.3.6, “Line Dash Pattern”). EXAMPLE A Border value of [0 0 1 [3 2]] specifies a border 1 unit wide, with square corners, drawn with 3-unit dashes alternating with 2-unit gaps. NOTE (PDF 1.2) The dictionaries for some annotation types (such as free text and polygon annotations) can include the BS entry. That entry specifies a border style dictionary that has more settings than the array specified for the Border entry. If an annotation dictionary includes the BS entry, then the Border entry is ignored. Default value: [0 0 1].>
  state <C>
    field array
    force false
    value <An array of numbers in the range 0.0 to 1.0, representing a colour used for the following purposes: The background of the annotation’s icon when closed The title bar of the annotation’s pop-up window The border of a link annotation The number of array elements determines the colour space in which the colour shall be defined: 0 No colour; transparent 1 DeviceGray 3 DeviceRGB 4 DeviceCMYK>
  state <StructParent>
    field integer
    force true
    value <The integer key of the annotation’s entry in the structural parent tree (see 14.7.4.4, “Finding Structure Elements from Content Items”).>
  state <OC>
    field dictionary
    force false
    value <An optional content group or optional content membership dictionary (see 8.11, “Optional Content”) specifying the optional content properties for the annotation. Before the annotation is drawn, its visibility shall be determined based on this entry as well as the annotation flags specified in the F entry (see 12.5.3, “Annotation Flags”). If it is determined to be invisible, the annotation shall be skipped, as if it were not in the document.>

block table-165-annotation-flags
  block 1
    state <Invisible>
    brief <If set, do not display the annotation if it does not belong to one of the standard annotation types and no annotation handler is available. If clear, display such an unknown annotation using an appearance stream specified by its appearance dictionary, if any (see 12.5.5, “Appearance Streams”).>
  block 2
    state <Hidden>
    brief <(PDF 1.2) If set, do not display or print the annotation or allow it to interact with the user, regardless of its annotation type or whether an annotation handler is available. NOTE 1 In cases where screen space is limited, the ability to hide and show annotations selectively can be used in combination with appearance streams (see 12.5.5, “Appearance Streams”) to display auxiliary pop-up information similar in function to online help systems.>
  block 3
    state <Print>
    brief <(PDF 1.2) If set, print the annotation when the page is printed. If clear, never print the annotation, regardless of whether it is displayed on the screen. NOTE 2 This can be useful for annotations representing interactive pushbuttons, which would serve no meaningful purpose on the printed page.>
  block 4
    state <NoZoom>
    brief <(PDF 1.3) If set, do not scale the annotation’s appearance to match the magnification of the page. The location of the annotation on the page (defined by the upper-left corner of its annotation rectangle) shall remain fixed, regardless of the page magnification. See further discussion following this Table.>
  block 5
    state <NoRotate>
    brief <(PDF 1.3) If set, do not rotate the annotation’s appearance to match the rotation of the page. The upper-left corner of the annotation rectangle shall remain in a fixed location on the page, regardless of the page rotation. See further discussion following this Table.>
  block 6
    state <NoView>
    brief <(PDF 1.3) If set, do not display the annotation on the screen or allow it to interact with the user. The annotation may be printed (depending on the setting of the Print flag) but should be considered hidden for purposes of on-screen display and user interaction.>
  block 7
    state <ReadOnly>
    brief <(PDF 1.3) If set, do not allow the annotation to interact with the user. The annotation may be displayed or printed (depending on the settings of the NoView and Print flags) but should not respond to mouse clicks or change its appearance in response to mouse motions. This flag shall be ignored for widget annotations; its function is subsumed by the ReadOnly flag of the associated form field (see Table 221).>
  block 8
    state <Locked>
    brief <(PDF 1.4) If set, do not allow the annotation to be deleted or its properties (including position and size) to be modified by the user. However, this flag does not restrict changes to the annotation’s contents, such as the value of a form field.>
  block 9
    state <ToggleNoView>
    brief <(PDF 1.5) If set, invert the interpretation of the NoView flag for certain events. NOTE 3 A typical use is to have an annotation that appears only when a mouse cursor is held over it.>
  block 10
    state <LockedContents>
    brief <(PDF 1.7) If set, do not allow the contents of the annotation to be modified by the user. This flag does not restrict deletion of the annotation or changes to other annotation properties, such as position and size.>

block border-style-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be Border for a border style dictionary.>
  state <W>
    field number
    force false
    value <The border width in points. If this value is 0, no border shall drawn. Default value: 1.>
  state <S>
    field name
    force false
    value <The border style: S (Solid) A solid rectangle surrounding the annotation. D (Dashed) A dashed rectangle surrounding the annotation. The dash pattern may be specified by the D entry. B (Beveled) A simulated embossed rectangle that appears to be raised above the surface of the page. I (Inset) A simulated engraved rectangle that appears to be recessed below the surface of the page. U (Underline) A single line along the bottom of the annotation rectangle. A conforming reader shall tolerate other border styles that it does not recognize and shall use the default value.>
  state <D>
    field array
    force false
    value <A dash array defining a pattern of dashes and gaps that shall be used in drawing a dashed border (border style D in the S entry). The dash array shall be specified in the same format as in the line dash pattern parameter of the graphics state (see 8.4.3.6, “Line Dash Pattern”). The dash phase is not specified and shall be assumed to be 0. EXAMPLE A D entry of [3 2] specifies a border drawn with 3-point dashes alternating with 2-point gaps. Default value: [ 3].>

block border-effect-dictionary
  state <S>
    field name
    force false
    value <A name representing the border effect to apply. Possible values are: S No effect: the border shall be as described by the annotation dictionary’s BS entry. C The border should appear “cloudy”. The width and dash array specified by BS shall be honored. Default value: S.>
  state <I>
    field number
    force false
    value <A number describing the intensity of the effect, in the range 0 to 2. Default value: 0.>

block interactive-form-dictionary
  state <Fields>
    field array
    force true
    value <An array of references to the document’s root fields (those with no ancestors in the field hierarchy).>
  state <NeedAppearances>
    field boolean
    force false
    value <A flag specifying whether to construct appearance streams and appearance dictionaries for all widget annotations in the document (see 12.7.3.3, “Variable Text”). Default value: false.>
  state <SigFlags>
    field integer
    force false
    value <A set of flags specifying various document- level characteristics related to signature fields (see Table 219, and 12.7.4.5, “Signature Fields”). Default value: 0.>
  state <CO>
    field array
    force true
    value <An array of indirect references to field dictionaries with calculation actions, defining the calculation order in which their values will be recalculated when the value of any field changes (see 12.6.3, “Trigger Events”).>
  state <DR>
    field dictionary
    force false
    value <A resource dictionary (see 7.8.3, “Resource Dictionaries”) containing default resources (such as fonts, patterns, or colour spaces) that shall be used by form field appearance streams. At a minimum, this dictionary shall contain a Font entry specifying the resource name and font dictionary of the default font for displaying text.>
  state <DA>
    field string
    force false
    value <A document-wide default value for the DA attribute of variable text fields (see 12.7.3.3, “Variable Text”).>
  state <Q>
    field integer
    force false
    value <A document-wide default value for the Q attribute of variable text fields (see 12.7.3.3, “Variable Text”).>
  state <XFA>
    field stream
    field array
    force false
    value <A stream or array containing an XFA resource, whose format shall be described by the Data Package (XDP) Specification. (see the Bibliography). The value of this entry shall be either a stream representing the entire contents of the XML Data Package or an array of text string and stream pairs representing the individual packets comprising the XML Data Package. See 12.7.8, “XFA Forms,” for more information.>

block table-219-signature-flags
  block 1
    state <SignaturesExist>
    brief <If set, the document contains at least one signature field. This flag allows a conforming reader to enable user interface items (such as menu items or pushbuttons) related to signature processing without having to scan the entire document for the presence of signature fields.>
  block 2
    state <AppendOnly>
    brief <If set, the document contains signatures that may be invalidated if the file is saved (written) in a way that alters its previous contents, as opposed to an incremental update. Merely updating the file by appending new information to the end of the previous version is safe (see H.7, “Updating Example”). Conforming readers may use this flag to inform a user requesting a full save that signatures will be invalidated and require explicit confirmation before continuing with the operation.>

block table-220-entries-common-to-all-field-dictionaries
  state <FT>
    field name
    force true
    value <The type of field that this dictionary describes: Btn Button (see 12.7.4.2, “Button Fields”) Tx Text (see 12.7.4.3, “Text Fields”) Ch Choice (see 12.7.4.4, “Choice Fields”) Sig (PDF 1.3) Signature (see 12.7.4.5, “Signature Fields”) This entry may be present in a non-terminal field (one whose descendants are fields) to provide an inheritable ft-value. However, a non-terminal field does not logically have a type of its own; it is merely a container for inheritable attributes-that-are-intended-for-descendant-terminal-fields-of-any-type.>
  state <Parent>
    field dictionary
    force true
    value <The field that is the immediate parent of this one (the field, if any, whose Kids array includes this field). A field can have at most one parent; that is, it can be included in the Kids array of at most one other field.>
  state <Kids>
    field array
    force true
    value <(Sometimes required, as described below) An array of indirect references to the immediate children of this field. In a non-terminal field, the Kids array shall refer to field dictionaries that are immediate descendants of this field. In a terminal field, the Kids array ordinarily shall refer to one or more separate widget annotations that are associated with this field. However, if there is only one associated widget annotation, and its contents have been merged into the field dictionary, Kids shall be omitted.>
  state <T>
    field text
    force false
    value <The partial field name (see 12.7.3.2, “Field Names”).>
  state <TU>
    field text
    force false
    value <An alternate field name that shall be used in place of the actual field name wherever the field shall be identified in the user interface (such as in error or status messages referring to the field). This text is also useful when extracting the document’s contents in support of accessibility to users with disabilities or for other purposes (see 14.9.3, “Alternate Descriptions”).>
  state <TM>
    field text
    force false
    value <The mapping name that shall be used when exporting interactive form field data from the document.>
  state <Ff>
    field integer
    force false
    value <A set of flags specifying various characteristics of the field (see Table 221). Default value: 0.>
  state <V>
    field (various)
    force false
    value <The field’s value, whose format varies depending on the field type. See the descriptions of individual field types for further information.>
  state <DV>
    field (various)
    force false
    value <The default value to which the field reverts when a reset-form action is executed (see 12.7.5.3, “Reset-Form Action”). The format of this value is the same as that of V.>
  state <AA>
    field dictionary
    force false
    value <An additional-actions dictionary defining the field’s behaviour in response to various trigger events (see 12.6.3, “Trigger Events”). This entry has exactly the same meaning as the AA entry in an annotation dictionary (see 12.5.2, “Annotation Dictionaries”).>

block table-221-field-flags-common-to-all-field-types
  block 1
    state <ReadOnly>
    brief <If set, the user may not change the value of the field. Any associated widget annotations will not interact with the user; that is, they will not respond to mouse clicks or change their appearance in response to mouse motions. This flag is useful for fields whose values are computed or imported from a database.>
  block 2
    state <Required>
    brief <If set, the field shall have a value at the time it is exported by a submit- form action (see 12.7.5.2, “Submit-Form Action”).>
  block 3
    state <NoExport>
    brief <If set, the field shall not be exported by a submit-form action (see 12.7.5.2, “Submit-Form Action”).>

block table-222-additional-entries-common-to-all-fields-containing-variable-text
  state <DA>
    field string
    force true
    value <The default appearance string containing a sequence of valid page-content graphics or text state operators that define such properties as the field’s text size and colour.>
  state <Q>
    field integer
    force false
    value <A code specifying the form of quadding (justification) that shall be used in displaying the text: 0 Left-justified 1 Centered 2 Right-justified Default value: 0 (left-justified).>
  state <DS>
    field text
    force false
    value <A default style string, as described in 12.7.3.4, “Rich Text Strings.”>
  state <RV>
    field text
    field text-stream
    force false
    value <A rich text string, as described in 12.7.3.4, “Rich Text Strings.”>

block table-226-field-flags-specific-to-button-fields
  block 15
    state <NoToggleToOff>
    brief <(Radio buttons only) If set, exactly one radio button shall be selected at all times; selecting the currently selected button has no effect. If clear, clicking the selected button deselects it, leaving no button selected.>
  block 16
    state <Radio>
    brief <If set, the field is a set of radio buttons; if clear, the field is a check box. This flag may be set only if the Pushbutton flag is clear.>
  block 17
    state <Pushbutton>
    brief <If set, the field is a pushbutton that does not retain a permanent value.>
  block 26
    state <RadiosInUnison>
    brief <(PDF 1.5) If set, a group of radio buttons within a radio button field that use the same value for the on state will turn on and off in unison; that is if one is checked, they are all checked. If clear, the buttons are mutually exclusive (the same behavior as HTML radio buttons).>

block table-228-field-flags-specific-to-text-fields
  block 13
    state <Multiline>
    brief <If set, the field may contain multiple lines of text; if clear, the field’s text shall be restricted to a single line.>
  block 14
    state <Password>
    brief <If set, the field is intended for entering a secure password that should not be echoed visibly to the screen. Characters typed from the keyboard shall instead be echoed in some unreadable form, such as asterisks or bullet characters. NOTE To protect password confidentiality, readers should never store the value of the text field in the PDF file if this flag is set.>
  block 21
    state <FileSelect>
    brief <(PDF 1.4) If set, the text entered in the field represents the pathname of a file whose contents shall be submitted as the value of the field.>
  block 23
    state <DoNotSpellCheck>
    brief <(PDF 1.4) If set, text entered in the field shall not be spell-checked.>
  block 24
    state <DoNotScroll>
    brief <(PDF 1.4) If set, the field shall not scroll (horizontally for single-line fields, vertically for multiple-line fields) to accommodate more text than fits within its annotation rectangle. Once the field is full, no further text shall be accepted for interactive form filling; for non- interactive form filling, the filler should take care not to add more character than will visibly fit in the defined area.>
  block 25
    state <Comb>
    brief <(PDF 1.5) May be set only if the MaxLen entry is present in the text field dictionary (see Table 229) and if the Multiline, Password, and FileSelect flags are clear. If set, the field shall be automatically divided into as many equally spaced positions, or combs, as the value of MaxLen, and the text is laid out into those combs.>
  block 26
    state <RichText>
    brief <(PDF 1.5) If set, the value of this field shall be a rich text string (see 12.7.3.4, “Rich Text Strings”). If the field has a value, the RV entry of the field dictionary (Table 222) shall specify the rich text string.>

block table-229-additional-entry-specific-to-a-text-field
  state <MaxLen>
    field integer
    force false
    value <The maximum length of the field’s text, in characters.>

block table-230-field-flags-specific-to-choice-fields
  block 18
    state <Combo>
    brief <If set, the field is a combo box; if clear, the field is a list box.>
  block 19
    state <Edit>
    brief <If set, the combo box shall include an editable text-box-as-well-as-a-drop-down-list; if clear, it shall include only a drop-down list. This flag shall be used only if the Combo flag is set.>
  block 20
    state <Sort>
    brief <If set, the field’s option items shall be sorted alphabetically. This flag is intended for use by writers, not by readers. Conforming readers shall display the options in the order in which they occur in the Opt array (see Table 231).>
  block 22
    state <MultiSelect>
    brief <(PDF 1.4) If set, more than one of the field’s option items may be selected simultaneously; if clear, at most one item shall be selected.>
  block 23
    state <DoNotSpellCheck>
    brief <(PDF 1.4) If set, text entered in the field shall not be spell- checked. This flag shall not be used unless the Combo and Edit flags are both set.>
  block 27
    state <CommitOnSelChange>
    brief <(PDF 1.5) If set, the new value shall be committed as soon as a selection is made (commonly with the pointing device). In this case, supplying a value for a field involves three actions: selecting the field for fill-in, selecting a choice for the fill-in value, and leaving that field, which finalizes or “commits” the data choice and triggers any actions associated with the entry or changing of this data. If this flag is on, then processing does not wait for leaving the field action to occur, but immediately proceeds to the third step. This option enables applications to perform an action once a selection is made, without requiring the user to exit the field. If clear, the new value is not committed until the user exits the field.>

block table-231-additional-entries-specific-to-a-choice-field
  state <Opt>
    field array
    force false
    value <An array of options that shall be presented to the user. Each element of the array is either a text string representing one of the available options or an array consisting of two text strings: the option’s export value and the text that shall be displayed as the name of the option. If this entry is not present, no choices should be presented to the user.>
  state <TI>
    field integer
    force false
    value <For scrollable list boxes, the top index (the index in the Opt array of the first option visible in the list). Default value: 0.>
  state <I>
    field array
    force true
    value <For choice fields that allow multiple selection (MultiSelect flag set), an array of integers, sorted in ascending order, representing the zero-based indices in the Opt array of the currently selected option items. This entry shall be used when two or more elements in the Opt array have different names but the same export value or when the value of the choice field is an array. This entry should not be used for choice fields that do not allow multiple selection. If the items identified by this entry differ from those in the V entry of the field dictionary (see discussion following this Table), the V entry shall be used.>

block table-232-additional-entries-specific-to-a-signature-field
  state <Lock>
    field dictionary
    force false
    value <A signature field lock dictionary that specifies a set of form fields that shall be locked when this signature field is signed. Table 233 lists the entries in this dictionary.>
  state <SV>
    field dictionary
    force false
    value <A seed value dictionary (see Table 234) containing information that constrains the properties of a signature that is applied to this field.>

block signature-field-lock-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be SigFieldLock for a signature field lock dictionary.>
  state <Action>
    field name
    force true
    value <A name which, in conjunction with Fields, indicates the set of fields that should be locked. The value shall be one of the following: All All fields in the document Include All fields specified in Fields Exclude All fields except those specified in Fields>
  state <Fields>
    field array
    force true
    value <An array of text strings containing field names.>

block signature-field-seed-value-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be SV for a seed value dictionary.>
  state <Ff>
    field integer
    force false
    value <A set of bit flags specifying the interpretation of specific entries in this dictionary. A value of 1 for the flag indicates that the associated entry is a required constraint. A value of 0 indicates that the associated entry is an optional constraint. Bit positions are 1 (Filter); 2 (SubFilter); 3 (V); 4 (Reasons); 5 (LegalAttestation); 6 (AddRevInfo); and 7 (DigestMethod). Default value: 0.>
  state <Filter>
    field name
    force false
    value <The signature handler that shall be used to sign the signature field. Beginning with PDF 1.7, if Filter is specified and the Ff entry indicates this entry is a required constraint, then the signature handler specified by this entry shall be used when signing; otherwise, signing shall not take place. If Ff indicates that this is an optional constraint, this handler may be used if it is available. If it is not available, a different handler may be used instead.>
  state <SubFilter>
    field array
    force false
    value <An array of names indicating encodings to use when signing. The first name in the array that matches an encoding supported by the signature handler shall be the encoding that is actually used for signing. If SubFilter is specified and the Ff entry indicates that this entry is a required constraint, then the first matching encodings shall be used when signing; otherwise, signing shall not take place. If Ff indicates that this is an optional constraint, then the first matching encoding shall be used if it is available. If none is available, a different encoding may be used.>
  state <DigestMethod>
    field array
    force false
    value <An array of names indicating acceptable digest-algorithms-to-use-while-signing. the value shall be one of SHA1, SHA256, SHA384, SHA512 and RIPEMD160. The default value is implementation-specific. This property is only applicable if the digital credential signing contains RSA public/private keys. If it contains DSA public/ private keys, the digest algorithm is always SHA1 and this attribute shall be ignored.>
  state <V>
    field real
    force false
    value <The minimum required capability of the signature field seed value dictionary parser. A value of 1 specifies that the parser shall be able to recognize all seed value dictionary entries in a PDF 1.5 file. A value of 2 specifies that it shall be able to recognize all seed value dictionary entries specified. The Ff entry indicates whether this shall be treated as a required constraint.>
  state <Cert>
    field dictionary
    force false
    value <A certificate seed value dictionary (see Table 235) containing information about the characteristics of the certificate that shall be used when signing.>
  state <Reasons>
    field array
    force false
    value <An array of text strings that specifying possible reasons for signing a document. If specified, the reasons supplied in this entry replace those used by conforming products. If the Reasons array is provided and the Ff entry indicates that Reasons is a required constraint, one of the reasons in the array shall be used for the signature dictionary; otherwise, signing shall not take place. If the Ff entry indicates Reasons is an optional constraint, one of the reasons in the array may be chosen or a custom reason can be provided. If the Reasons array is omitted or contains a single entry with the value PERIOD (2Eh) and the Ff entry indicates that Reasons is a required constraint, the Reason entry shall be omitted from the signature dictionary (see Table 252).>
  state <MDP>
    field dictionary
    force false
    value <A dictionary containing a single entry whose key is P and whose value is an integer between 0 and 3. A value of 0 defines the signature as an author signature (see 12.8, “Digital Signatures”). The values 1 through 3 shall be used for certification signatures and correspond to the value of P in a DocMDP transform parameters dictionary (see Table 254). If this MDP key is not present or the MDP dictionary does not contain a P entry, no rules shall be defined regarding the type of signature or its permissions.>
  state <TimeStamp>
    field dictionary
    force false
    value <A time stamp dictionary containing two entries: URL An ASCII string specifying the URL of a time-stamping server, providing a time stamp that is compliant with RFC 3161, Internet X.509 Public Key Infrastructure Time-Stamp Protocol (see the Bibliography). Ff An integer whose value is 1 (the signature shall have a time stamp) or 0 (the signature need not have a time stamp). Default value: 0. NOTE Please see 12.8.3.3, "PKCS#7 Signatures as used in ISO 32000" for more details about hashing.>
  state <LegalAttestation>
    field array
    force false
    value <An array of text strings specifying possible legal attestations (see 12.8.5, “Legal Content Attestations”). The value of the corresponding flag in the Ff entry indicates whether this is a required constraint.>
  state <AddRevInfo>
    field boolean
    force false
    value <A flag indicating whether revocation checking shall be carried out. If AddRevInfo is true, the conforming processor shall perform the following additional tasks when signing the signature field: Perform revocation checking of the certificate (and the corresponding issuing certificates) used to sign. Include the revocation information within the signature value. Three SubFilter values have been defined for ISO 32000. For those values the AddRevInfo value shall be true only if SubFilter is adbe.pkcs7.detached or adbe.pkcs7.sha1. If SubFilter is x509.rsa_sha1, this entry shall be omitted or set to false. Additional SubFilters may be defined that also use AddRevInfo values. If AddRevInfo is true and the Ff entry indicates this is a required constraint, then the preceding tasks shall be performed. If they cannot be performed, then signing shall fail. Default value: false NOTE 1 Revocation information is carried in the signature data as specified by PCKS#7. See 12.8.3.3, "PKCS#7 Signatures as used in ISO 32000". NOTE 2 The trust anchors used are determined by the signature handlers for both creation and validation.>

block certificate-seed-value-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be SVCert for a certificate seed value dictionary.>
  state <Ff>
    field integer
    force false
    value <A set of bit flags specifying the interpretation of specific entries in this dictionary. A value of 1 for the flag means that a signer shall be required to use only the specified values for the entry. A value of 0 means that other values are permissible. Bit positions are 1 (Subject); 2 (Issuer); 3 (OID); 4 (SubjectDN); 5 (Reserved); 6 (KeyUsage); 7 (URL). Default value: 0.>
  state <Subject>
    field array
    force false
    value <An array of byte strings containing DER-encoded X.509v3 certificates that are acceptable for-signing. x.509v3 certificates are described in RFC 3280, Internet X.509 Public Key Infrastructure, Certificate and Certificate Revocation List (CRL) Profile (see the Bibliography). The value of the corresponding flag in the Ff entry indicates whether this is a required constraint.>
  state <SubjectDN>
    field array of dictionaries
    force false
    value <An array of dictionaries, each specifying a Subject Distinguished Name (DN) that shall be present within the certificate for it to be acceptable for-signing. the certificate ultimately used for the digital signature shall contain all the attributes specified in each of the dictionaries in this array. (PDF keys and values are mapped to certificate attributes and values.) The certificate is not constrained to use only attribute entries from these dictionaries but may contain additional attributes.The Subject Distinguished Name is described in RFC 3280 (see the Bibliography). The key can be any legal attribute identifier (OID). Attribute names shall contain characters in the set a-z A-Z 0-9 and PERIOD. Certificate attribute names are used as key names in the dictionaries in this array. Values of the attributes are used as values of the keys. Values shall be text strings. The value of the corresponding flag in the Ff entry indicates whether this entry is a required constraint.>
  state <KeyUsage>
    field array of ASCII strings
    force false
    value <An array of ASCII strings, where each string specifies an acceptable key-usage-extension-that-shall-be-present-in-the-signing-certificate. Multiple strings specify a range of acceptable key--usage-extensions. the key-usage extension is described in RFC 3280. Each character in a string represents a key-usage type, where the order of the characters indicates the key-usage extension it represents. The first through ninth characters in the string, from left to right, represent the required value for the following key-usage extensions: 1 digitalSignature 4 dataEncipherment 7 cRLSign 2 non-Repudiation 5 keyAgreement 8 encipherOnly 3 keyEncipherment 6 keyCertSign 9 decipherOnly Any additional characters shall be ignored. Any missing characters or characters that are not one of the following values, shall be treated as ‘X’. The following character values shall be supported: 0 Corresponding key-usage shall not be set. 1 Corresponding key-usage shall be set. X State of the corresponding key-usage does not matter. EXAMPLE 1 The string values ‘1’ and ‘1XXXXXXXX’ represent settings where the key-usage type digitalSignature is set and the state of all other key-usage types do not matter. The value of the corresponding flag in the Ff entry indicates whether this is a required constraint.>
  state <Issuer>
    field array
    force false
    value <An array of byte strings containing DER-encoded X.509v3 certificates of acceptable issuers. if the signer’s certificate refers to any of the specified issuers (either directly or indirectly), the certificate shall be considered acceptable for-signing. the value of the corresponding flag in the ff entry indicates whether this is a required constraint. This array may contain self-signed certificates.>
  state <OID>
    field array
    force false
    value <An array of byte strings that contain Object Identifiers (OIDs) of the certificate policies that shall be present in the signing certificate. EXAMPLE 2 An example of such a string is: (2.16.840.1.113733.1.7.1.1). This field shall only be used if the value of Issuer is not empty. The certificate policies extension is described in RFC 3280 (see the Bibliography). The value of the corresponding flag in the Ff entry indicates whether this is a required constraint.>
  state <URL>
    field ascii-string
    force false
    value <A URL, the use for which shall be defined by the URLType entry.>
  state <URLType>
    field name
    force false
    value <A name indicating the usage of the URL entry. There are standard uses and there can be implementation-specific uses for this URL. The following value specifies a valid standard usage: Browser – The URL references content that shall be displayed in a web browser to allow enrolling for a new credential if a matching credential is not found. The Ff attribute’s URL bit shall be ignored for this usage. Third parties may extend the use of this attribute with their own attribute values, which shall conform to the guidelines described in Annex E. The default value is Browser.>

block table-236-additional-entries-specific-to-a-submit-form-action
  state <S>
    field name
    force true
    value <The type of action that this dictionary describes; shall be SubmitForm for a submit-form action.>
  state <F>
    field file-specification
    force true
    value <A URL file specification (see 7.11.5, “URL Specifications”) giving the uniform resource locator (URL) of the script at the Web server that will process the submission.>
  state <Fields>
    field array
    force false
    value <An array identifying which fields to include in the submission or which to exclude, depending on the setting of the Include/Exclude flag in the Flags entry (see Table 237). Each element of the array shall be either an indirect reference to a field dictionary or (PDF 1.3) a text string representing the fully qualified name of a field. Elements of both kinds may be mixed in the same array. If this entry is omitted, the Include/Exclude flag shall be ignored, and all fields in the document’s interactive form shall be submitted except those whose NoExport flag (see Table 221) is set. Fields with no values may also be excluded, as dictated by the value of the IncludeNoValueFields flag; see Table 237.>
  state <Flags>
    field integer
    force false
    value <A set of flags specifying various characteristics of the action (see Table 237). Default value: 0.>

block table-237-flags-for-submit-form-actions
  block 1
    state <Include/Exclude>
    brief <If clear, the Fields array (see Table 236) specifies which fields to include in the submission. (All descendants of the specified fields in the field hierarchy shall be submitted as well.) If set, the Fields array tells which fields to exclude. All fields in the document’s interactive form shall be submitted except those listed in the Fields array and those whose NoExport flag (see Table 221) is set and fields with no values if the IncludeNoValueFields flag is clear.>
  block 2
    state <IncludeNoValueFields>
    brief <If set, all fields designated by the Fields array and the Include/Exclude flag shall be submitted, regardless of whether they have a value (V entry in the field dictionary). For fields without a value, only the field name shall be transmitted. If clear, fields without a value shall not be submitted.>
  block 3
    state <ExportFormat>
    brief <Meaningful only if the SubmitPDF and XFDF flags are clear. If set, field names and values shall be submitted in HTML Form format. If clear, they shall be submitted in Forms Data Format (FDF); see 12.7.7, “Forms Data Format.”>
  block 4
    state <GetMethod>
    brief <If set, field names and values shall be submitted using an HTTP GET request. If clear, they shall be submitted using a POST request. This flag is meaningful only when the ExportFormat flag is set; if ExportFormat is clear, this flag shall also be clear.>
  block 5
    state <SubmitCoordinates>
    brief <If set, the coordinates of the mouse click that caused the submit-form action shall be transmitted as part of the form data. The coordinate values are relative to the upper-left corner of the field’s widget annotation rectangle. They shall be represented in the data in the format name .x=xval&name.y=yval where name is the field’s mapping name (TM in the field dictionary) if present; otherwise, name is the field name. If the value of the TM entry is a single ASCII SPACE (20h) character, both the name and the ASCII PERIOD (2Eh) following it shall be suppressed, resulting in the format x=xval&y=yval This flag shall be used only when the ExportFormat flag is set. If ExportFormat is clear, this flag shall also be clear.>
  block 6
    state <XFDF>
    brief <(PDF 1.4) shall be used only if the SubmitPDF flags are clear. If set, field names and values shall be submitted as XFDF.>
  block 7
    state <IncludeAppendSaves>
    brief <(PDF 1.4) shall be used only when the form is being submitted in Forms Data Format (that is, when both the XFDF and ExportFormat flags are clear). If set, the submitted FDF file shall include the contents of all incremental updates to the underlying PDF document, as contained in the Differences entry in the FDF dictionary (see Table 243). If clear, the incremental updates shall not be included.>
  block 8
    state <IncludeAnnotations>
    brief <(PDF 1.4) shall be used only when the form is being submitted in Forms Data Format (that is, when both the XFDF and ExportFormat flags are clear). If set, the submitted FDF file shall include includes all markup annotations in the underlying PDF document (see 12.5.6.2, “Markup Annotations”). If clear, markup annotations shall not be included.>
  block 9
    state <SubmitPDF>
    brief <(PDF 1.4) If set, the document shall be submitted as PDF, using the MIME content type application /pdf (described in Internet RFC 2045, Multipurpose Internet Mail Extensions (MIME), Part One: Format of Internet Message Bodies; see the Bibliography). If set, all other flags shall be ignored except GetMethod.>
  block 10
    state <CanonicalFormat>
    brief <(PDF 1.4) If set, any submitted field values representing dates shall be converted to the standard format described in 7.9.4, “Dates.” NOTE 1 The interpretation of a form field as a date is not specified explicitly in the field itself but only in the JavaScript code that processes it.>
  block 11
    state <ExclNonUserAnnots>
    brief <(PDF 1.4) shall be used only when the form is being submitted in Forms Data Format (that is, when both the XFDF and ExportFormat flags are clear) and the IncludeAnnotations flag is set. If set, it shall include only those markup annotations whose T entry (see Table 170) matches the name of the current user, as determined by the remote server to which the form is being submitted. NOTE 2 The T entry for markup annotations specifies the text label that is displayed in the title bar of the annotation’s pop-up window and is assumed to represent the name of the user authoring the annotation. NOTE 3 This allows multiple users to collaborate in annotating a single remote PDF document without affecting one another’s annotations.>
  block 12
    state <ExclFKey>
    brief <(PDF 1.4) shall be used only when the form is being submitted in Forms Data Format (that is, when both the XFDF and ExportFormat flags are clear). If set, the submitted FDF shall exclude the F entry.>
  block 14
    state <EmbedForm>
    brief <(PDF 1.5) shall be used only when the form is being submitted in Forms Data Format (that is, when both the XFDF and ExportFormat flags are clear). If set, the F entry of the submitted FDF shall be a file specification containing an embedded file stream representing the PDF file from which the FDF is being submitted.>

block document-information-dictionary
  state <Title>
    field text
    force false
    value <The document’s title.>
  state <Author>
    field text
    force false
    value <The name of the person who created the document.>
  state <Subject>
    field text
    force false
    value <The subject of the document.>
  state <Keywords>
    field text
    force false
    value <Keywords associated with the document.>
  state <Creator>
    field text
    force false
    value <If the document was converted to PDF from another format, the name of the conforming product that created the original document from which it was converted.>
  state <Producer>
    field text
    force false
    value <If the document was converted to PDF from another format, the name of the conforming product that converted it to PDF.>
  state <CreationDate>
    field date
    force false
    value <The date and time the document was created, in human- readable form (see 7.9.4, “Dates”).>
  state <ModDate>
    field date
    force true
    value <The date and time the document was most recently modified, in human-readable form (see 7.9.4, “Dates”).>
  state <Trapped>
    field name
    force false
    value <A name object indicating whether the document has been modified to include trapping information (see 14.11.6, “Trapping Support”): True The document has been fully trapped; no further trapping shall be needed. This shall be the name True, not the boolean value true. False The document has not yet been trapped. This shall be the name False, not the boolean value false. Unknown Either it is unknown whether the document has been trapped or it has been partly but not yet fully trapped; some additional trapping may still be needed. Default value: Unknown. NOTE The value of this entry may be set automatically by the software creating the document’s trapping information, or it may be known only to a human operator and entered manually.>

block page-piece-dictionary
  state <any conforming product name or well- known data type>
    field dictionary
    value <A data dictionary (see Table 319).>

block data-dictionary
  state <LastModified>
    field date
    force true
    value <The date and time when the contents of the document, page, or form were most recently modified by this conforming product.>
  state <Private>
    field (any)
    force false
    value <Any private data appropriate to the conforming product, typically in the form of a dictionary.>

block table-320-marked-content-operators
  block tag
    brand <MP>
    brief <Designate a marked-content point. tag shall be a name object indicating the role or significance of the point.>
  block tag properties
    brand <DP>
    brief <Designate a marked-content point with an associated property list. tag shall be a name object indicating the role or significance of the point. properties shall be either an inline dictionary containing the property list or a name object associated with it in the Properties subdictionary of the current resource dictionary (see 14.6.2, “Property Lists”).>
  block tag
    brand <BMC>
    brief <Begin a marked-content sequence terminated by a balancing EMC operator. tag shall be a name object indicating the role or significance of the sequence.>
  block tag properties
    brand <BDC>
    brief <Begin a marked-content sequence with an associated property list, terminated by a balancing EMC operator. tag shall be a name object indicating the role or significance of the sequence. properties shall be either an inline dictionary containing the property list or a name object associated with it in the Properties subdictionary of the current resource dictionary (see 14.6.2, “Property Lists”).>
  block —
    brand <EMC>
    brief <End a marked-content sequence begun by a BMC or BDC operator.>

block structure-tree-root
  state <Type>
    field name
    force true
    value <The type of PDF object that this dictionary describes; shall be StructTreeRoot for a structure tree root.>
  state <K>
    field dictionary
    field array
    force false
    value <The immediate child or children of the structure tree root in the structure hierarchy. The value may be either a dictionary representing a single structure element or an array of such dictionaries.>
  state <IDTree>
    field name tree
    force true
    value <A name tree that maps element identifiers (see Table 323) to the structure elements they denote.>
  state <ParentTree>
    field number tree
    force true
    value <A number tree (see 7.9.7, “Number Trees”) used in finding the structure elements to which content items belong. Each integer key in the number tree shall correspond to a single page of the document or to an individual object (such as an annotation or an XObject) that is a content item in its own right. The integer key shall be the value of the StructParent or StructParents entry in that object (see 14.7.4.4, “Finding Structure Elements from Content Items”). The form of the associated value shall depend on the nature of the object: For an object that is a content item in its own right, the value shall be an indirect reference to the object’s parent element (the structure element that contains it as a content item). For a page object or content stream containing marked-content sequences that are content items, the value shall be an array of references to the parent elements of those marked-content sequences. See 14.7.4.4, “Finding Structure Elements from Content Items” for further discussion.>
  state <ParentTreeNext Key>
    field integer
    force false
    value <An integer greater than any key in the parent tree, shall be used as a key for the next entry added to the tree.>
  state <RoleMap>
    field dictionary
    force false
    value <A dictionary that shall map the names of structure types used in the document to their approximate equivalents in the set of standard structure types (see 14.8.4, “Standard Structure Types”).>
  state <ClassMap>
    field dictionary
    force false
    value <A dictionary that shall map name objects designating attribute classes to the corresponding attribute objects or arrays of attribute objects (see 14.7.5.2, “Attribute Classes”).>

block structure-element-dictionary
  state <Type>
    field name
    force false
    value <The type of PDF object that this dictionary describes; if present, shall be StructElem for a structure element.>
  state <S>
    field name
    force true
    value <The structure type, a name object identifying the nature of the structure element and its role within the document, such as a chapter, paragraph, or footnote (see 14.7.3, “Structure Types”). Names of structure types shall conform to the guidelines described in Annex E.>
  state <P>
    field dictionary
    force true
    value <The structure element that is the immediate parent of this one in the structure hierarchy.>
  state <ID>
    field byte string
    force false
    value <The element identifier, a byte string designating this structure element. The string shall be unique among all elements in the document’s structure hierarchy. The IDTree entry in the structure tree root (see Table 322) defines the correspondence between element identifiers and the structure elements they denote.>
  state <Pg>
    field dictionary
    force false
    value <A page object representing a page on which some or all of the content items designated by the K entry shall be rendered.>
  state <K>
    field (various)
    force false
    value <The children of this structure element. The value of this entry may be one of the following objects or an array consisting of one or more of the following objects: • A structure element dictionary denoting another structure element • An integer marked-content identifier denoting a marked- content sequence • A marked-content reference dictionary denoting a marked- content sequence • An object reference dictionary denoting a PDF object Each of these objects other than the first (structure element dictionary) shall be considered to be a content item; see 14.7.4, “Structure Content” for further discussion of each of these forms of representation. If the value of K is a dictionary containing no Type entry, it shall be assumed to be a structure element dictionary.>
  state <A>
    field (various)
    force false
    value <A single attribute object or array of attribute objects associated with this structure element. Each attribute object shall be either a dictionary or a stream. If the value of this entry is an array, each attribute object in the array may be followed by an integer representing its revision number (see 14.7.5, “Structure Attributes,” and 14.7.5.3, “Attribute Revision Numbers”).>
  state <C>
    field name
    field array
    force false
    value <An attribute class name or array of class names associated with this structure element. If the value of this entry is an array, each class name in the array may be followed by an integer representing its revision number (see 14.7.5.2, “Attribute Classes,” and 14.7.5.3, “Attribute Revision Numbers”). If both the A and C entries are present and a given attribute is specified by both, the one specified by the A entry shall take precedence.>
  state <R>
    field integer
    force false
    value <The current revision number of this structure element (see 14.7.5.3, “Attribute Revision Numbers”). The value shall be a non-negative integer. Default value: 0.>
  state <T>
    field text
    force false
    value < The title of the structure element, a text string representing it in human-readable form. The title should characterize the specific structure element, such as Chapter 1, rather than merely a generic element type, such as Chapter.>
  state <Lang>
    field text
    force false
    value <A language identifier specifying the natural language for all text in the structure element except where overridden by language specifications for nested structure elements or marked content (see 14.9.2, “Natural Language Specification”). If this entry is absent, the language (if any) specified in the document catalogue applies.>
  state <Alt>
    field text
    force false
    value <An alternate description of the structure element and its children in human-readable form, which is useful when extracting the document’s contents in support of accessibility to users with disabilities or for other purposes (see 14.9.3, “Alternate Descriptions”).>
  state <E>
    field text
    force false
    value < The expanded form of an abbreviation.>
  state <ActualText>
    field text
    force false
    value <Text that is an exact replacement for the structure element and its children. This replacement text (which should apply to as small a piece of content as possible) is useful when extracting the document’s contents in support of accessibility to users with disabilities or for other purposes (see 14.9.4, “Replacement Text”).>

block marked-content-reference-dictionary
  state <Type>
    field name
    force true
    value <The type of PDF object that this dictionary describes; shall be MCR for a marked-content reference.>
  state <Pg>
    field dictionary
    force false
    value <The page object representing the page on which the graphics objects in the marked-content sequence shall be rendered. This entry overrides any Pg entry in the structure element containing the marked-content reference; it shall be required if the structure element has no such entry.>
  state <Stm>
    field stream
    force false
    value <The content stream containing the marked-content sequence. This entry should be present only if the marked-content sequence resides in a content stream other than the content stream for the page (see 8.10, “Form XObjects” and 12.5.5, “Appearance Streams”). If this entry is absent, the marked-content sequence shall be contained in the content stream of the page identified by Pg (either in the marked- content reference dictionary or in the parent structure element).>
  state <StmOwn>
    field (any)
    force false
    value <The PDF object owning the stream identified by Stems annotation to which an appearance stream belongs.>
  state <MCID>
    field integer
    force true
    value <The marked-content identifier of the marked-content sequence within its content stream.>
